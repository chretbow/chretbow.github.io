<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[Basic]UML</title>
      <link href="/2019/07/03/Basic-UML/"/>
      <url>/2019/07/03/Basic-UML/</url>
      
        <content type="html"><![CDATA[<p>統一塑模語言（英語：Unified Modeling Language，縮寫 UML），有14種用於軟體系統的可視化模型。<br><a id="more"></a></p><h2 id="分類"><a href="#分類" class="headerlink" title="分類"></a>分類</h2><h3 id="結構性圖形-Structure-diagrams"><a href="#結構性圖形-Structure-diagrams" class="headerlink" title="結構性圖形(Structure diagrams)"></a>結構性圖形(Structure diagrams)</h3><ul><li>靜態圖(static diagram)<ul><li>類圖</li><li>物件圖</li><li>套件圖</li></ul></li><li>實現圖(implementation diagram)<ul><li>組件圖</li><li>部屬圖</li></ul></li><li>剖面圖</li><li>複合結構圖</li></ul><h3 id="行為式圖形-Behavior-diagrams"><a href="#行為式圖形-Behavior-diagrams" class="headerlink" title="行為式圖形(Behavior diagrams)"></a>行為式圖形(Behavior diagrams)</h3><ul><li>活動圖</li><li>狀態圖</li><li>使用個案圖</li></ul><h3 id="交互性圖形-Interaction-diagrams"><a href="#交互性圖形-Interaction-diagrams" class="headerlink" title="交互性圖形(Interaction diagrams)"></a>交互性圖形(Interaction diagrams)</h3><ul><li>通信圖</li><li>交互概述圖</li><li>時序圖</li><li>時間圖</li></ul><p><img src="/img/[Basic]UML/001.jpg" alt="UML"></p><h2 id="建議學習順序"><a href="#建議學習順序" class="headerlink" title="建議學習順序"></a>建議學習順序</h2><ol><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-class-diagram/" target="_blank" rel="noopener">類圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-activity-diagram/" target="_blank" rel="noopener">活動圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-sequence-diagram/" target="_blank" rel="noopener">時序圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/" target="_blank" rel="noopener">使用個案圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-state-machine-diagram/" target="_blank" rel="noopener">狀態圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-communication-diagram/" target="_blank" rel="noopener">通信圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-component-diagram/" target="_blank" rel="noopener">組件圖</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-deployment-diagram/" target="_blank" rel="noopener">部屬圖</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]Proxy Pattern</title>
      <link href="/2019/07/01/Design-Patterns-Proxy-Pattern/"/>
      <url>/2019/07/01/Design-Patterns-Proxy-Pattern/</url>
      
        <content type="html"><![CDATA[<p>代理模式，也稱為委任模式，屬於『結構型模式』。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>為其他物件提供一種代理，以控制對這個物件的訪問。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>抽象主題(Subject):具體科目和代理的共用接口。<br>真實主題(RealSubject):具體科目，定義Proxy的真實實體。<br>代理類別(Proxy):一個代理的實體，與Subject相通的接口，代理就可以替代實體。</p><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>一定程度上降低系統的耦合度。</li><li>遠程代理的機器可能有更好的性能和處理速度，可以快速響應客戶端請求。</li><li>虛擬代理用一個小對象代表一個大對象，減少資源消耗，提高運行速度。</li><li>保護代理控制使用權限</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>有些類型的代理，可能會造成請求的處理變慢。</li><li>有些代理需要額外工作，有些實現非常複雜。</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/[Design Patterns]Proxy Pattern/001.jpg" alt="UML"></p><h2 id="實際範例-送禮"><a href="#實際範例-送禮" class="headerlink" title="實際範例:送禮"></a>實際範例:送禮</h2><ul><li>抽象主題(Subject):使用送禮介面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C#">interface IGiveGift<br>&#123;<br>    void GiveDolls();<br>    void GiveFlowers();<br>    void GiveChocolate();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>真實主題(RealSubject):追求者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#">class Pursuit : IGiveGift<br>&#123;<br>    SchoolGirl mm;<br><br>    public Pursuit(SchoolGirl mm)<br>    &#123;<br>        this.mm = mm;<br>    &#125;<br><br>    public void GiveChocolate()<br>    &#123;<br>        Console.WriteLine(mm.Name + &quot; 送你巧克力&quot;);<br>    &#125;<br><br>    public void GiveDolls()<br>    &#123;<br>        Console.WriteLine(mm.Name + &quot; 送你洋娃娃&quot;);<br>    &#125;<br><br>    public void GiveFlowers()<br>    &#123;<br>        Console.WriteLine(mm.Name + &quot; 送你鮮花&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>代理類別(Proxy)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#">class Proxy : IGiveGift<br>&#123;<br>    Pursuit gg;<br><br>    public Proxy(SchoolGirl mm)<br>    &#123;<br>        gg = new Pursuit(mm);<br>    &#125;<br><br>    public void GiveChocolate()<br>    &#123;<br>        gg.GiveChocolate();<br>    &#125;<br><br>    public void GiveDolls()<br>    &#123;<br>        gg.GiveDolls();<br>    &#125;<br><br>    public void GiveFlowers()<br>    &#123;<br>        gg.GiveFlowers();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C#">SchoolGirl along = new SchoolGirl();<br>along.Name = &quot;阿龍&quot;;<br><br>Proxy daili = new Proxy(along);<br><br>daili.GiveDolls();<br>daili.GiveFlowers();<br>daili.GiveChocolate();<br><br>Console.Read();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]Decorator Pattern</title>
      <link href="/2019/06/29/Design-Patterns-Decorator-Pattern/"/>
      <url>/2019/06/29/Design-Patterns-Decorator-Pattern/</url>
      
        <content type="html"><![CDATA[<p>裝飾模式，屬於『結構型模式』。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>動態的給一個類別順序添加額外的職責，就增加功能來說比生成子類更為靈活。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li>抽象零件(Component):為具體零件的父類別。</li><li>具體零件(ConcreteComponent):繼承抽象零件</li><li>抽象裝飾(Decorator):繼承抽象零件，擴展抽象零件功能</li><li>具體裝飾(ConcreteDecorator):具體添加功能給component</li></ul><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>將裝飾功能搬出類別，可簡化原類別。</li><li>可以去除相關類中重複的裝飾邏輯</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>裝飾要考慮順序性，例如:穿衣，要先穿內衣，再穿TShirt。</li><li>裝飾如果多的話，要寫很多子類。</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/[Design Patterns]Decorator Pattern/001.jpg" alt="UML"></p><h2 id="實際範例-人穿衣"><a href="#實際範例-人穿衣" class="headerlink" title="實際範例:人穿衣"></a>實際範例:人穿衣</h2><ul><li>具體零件:使用虛擬方法，也可不用抽象零件，帶入名字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C#">class Person<br>&#123;<br>    private string name;<br><br>    public Person()<br>    &#123;<br>    &#125;<br><br>    public Person(string name)<br>    &#123;<br>        this.name = name;<br>    &#125;<br><br>    public virtual void Show()<br>    &#123;<br>        Console.WriteLine($&quot;裝扮的&#123;name&#125;&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>抽象裝飾:要有個裝飾方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#">class Finery : Person<br>&#123;<br>    protected Person person;<br><br>    public void Decorate(Person person)<br>    &#123;<br>        this.person = person;<br>    &#125;<br><br>    public override void Show()<br>    &#123;<br>        if (person != null)<br>        &#123;<br>            person.Show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具體裝飾:覆寫Show，需包含base</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#">class TShirts : Finery<br>&#123;<br>    public override void Show()<br>    &#123;<br>        Console.Write(&quot;大T薛 &quot;);<br>        base.Show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">Person xc = new Person(&quot;阿龍&quot;);<br>Console.WriteLine(&quot;第一種裝扮:&quot;);<br><br>BigTrouser kk = new BigTrouser();<br>TShirts dtx = new TShirts();<br><br>kk.Decorate(xc);<br>dtx.Decorate(kk);<br>dtx.Show();<br><br>Console.Read();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]SOLID</title>
      <link href="/2019/06/28/Design-Patterns-SOLID/"/>
      <url>/2019/06/28/Design-Patterns-SOLID/</url>
      
        <content type="html"><![CDATA[<p>SOLID是在程式設計領域的五個基本原則，主要在清除程式碼異味，<br>使程式碼好閱讀好維護，易擴充。</p><a id="more"></a><h2 id="Single-responsibility-principle-SRP-單一職責"><a href="#Single-responsibility-principle-SRP-單一職責" class="headerlink" title="Single responsibility principle(SRP) 單一職責"></a>Single responsibility principle(SRP) 單一職責</h2><p>一個類別只負責一件事情，但也要注意功能被切的太細碎造成過度設計(over design)。</p><h2 id="Open-close-principle-OCP-開放-封閉原則"><a href="#Open-close-principle-OCP-開放-封閉原則" class="headerlink" title="Open/close principle(OCP) 開放/封閉原則"></a>Open/close principle(OCP) 開放/封閉原則</h2><p>開放擴充封閉修改原則。要能保留彈性，擴充新功能，但舊功能應該是封閉修改，<br>或是需要調整也不影響到其他功能。</p><h2 id="Liskov-substitution-principle-LSP-Liskov替換"><a href="#Liskov-substitution-principle-LSP-Liskov替換" class="headerlink" title="Liskov substitution principle(LSP) Liskov替換"></a>Liskov substitution principle(LSP) Liskov替換</h2><p>父類別應該可以再不改變程式正確性的前提下被它的子類別替換。</p><h2 id="Interface-Segregation-Principle-ISP-介面隔離"><a href="#Interface-Segregation-Principle-ISP-介面隔離" class="headerlink" title="Interface Segregation Principle(ISP) 介面隔離"></a>Interface Segregation Principle(ISP) 介面隔離</h2><p>將不同功能分離為不同的介面，而不是使用一個廣泛用途的介面。</p><h2 id="Dependency-Inversion-Principle-DIP-依賴反轉"><a href="#Dependency-Inversion-Principle-DIP-依賴反轉" class="headerlink" title="Dependency Inversion Principle(DIP) 依賴反轉"></a>Dependency Inversion Principle(DIP) 依賴反轉</h2><p>依賴於抽象而不是一個實體。<br>高階模組不應依賴低階模組，兩個都應該依賴在抽象概念上；<br>抽象概念不依賴細節，而是細節依賴在抽象概念。<br>依賴注入是種實現控制反轉的一種方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]StrategyPattern</title>
      <link href="/2019/06/18/Design-Patterns-StrategyPattern/"/>
      <url>/2019/06/18/Design-Patterns-StrategyPattern/</url>
      
        <content type="html"><![CDATA[<p>策略模式屬於『行為型模式』，可以搭配簡單工廠模式一起使用。<br>與簡單工廠模式不同於，策略模式關注的是行為，簡單工廠關注的是物件。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>將達成一種目的中各種不同邏輯(策略)，包裝為一個專門的類別。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li>抽象策略:一般為具體策略的父類別</li><li>具體策略:繼承抽象產品</li><li>策略介面:根據注入的策略實體，計算結果</li><li>策略工廠介面:結合簡單工廠，注入策略類型，再根據策略產生實體，計算結果</li></ul><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>靈活的替換不同的策略</li><li>拓展容易</li><li>減少if else</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>要自行選擇策略</li><li>會產生很多策略類</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/[Design Patterns]StrategyPattern/002.jpg" alt="UML"></p><h2 id="實際範例-收銀機"><a href="#實際範例-收銀機" class="headerlink" title="實際範例:收銀機"></a>實際範例:收銀機</h2><ul><li>抽象策略:CashSuper</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C#">public abstract class CashSuper<br>&#123;<br>    public abstract double AcceptCash(double money);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具體策略:正常收費</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class CashNormal : CashSuper<br>&#123;<br>    public override double AcceptCash(double money)<br>    &#123;<br>        return money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具體策略:滿300返100</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class CashReturn : CashSuper<br>&#123;<br>    private double condition = 0.0d;<br>    private double moneyReturn = 0.0d;<br><br>    public CashReturn(string condition, string moneyReturn)<br>    &#123;<br>        this.condition = double.Parse(condition);<br>        this.moneyReturn = double.Parse(moneyReturn);<br>    &#125;<br><br>    public override double AcceptCash(double money)<br>    &#123;<br>        double result = money;<br><br>        if (money &gt;= condition)<br>        &#123;<br>            result = money - Math.Floor(money / condition) * moneyReturn;<br>        &#125;<br><br>        return result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具體策略:打8折</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class CashRebate : CashSuper<br>&#123;<br>    private double rebate = 1d;<br><br>    public CashRebate(string rebate)<br>    &#123;<br>        this.rebate = double.Parse(rebate);<br>    &#125;<br><br>    public override double AcceptCash(double money)<br>    &#123;<br>        return money * rebate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>策略介面:注入折扣的策略實體，由使用者選擇策略</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class CashContext<br>&#123;<br>    private CashSuper cs;<br><br>    public CashContext(CashSuper cs)<br>    &#123;<br>        this.cs = cs;<br>    &#125;<br><br>    public double GetResult(double money)<br>    &#123;<br>        return cs.AcceptCash(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>策略工廠介面:注入折扣的類型，由工廠判斷產生哪種策略實體</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class CashContextFactory<br>&#123;<br>    private CashSuper cs = null;<br><br>    public CashContextFactory(string type)<br>    &#123;<br>        switch (type)<br>        &#123;<br>            case &quot;正常收費&quot;:<br>                cs = new CashNormal();<br>                break;<br>            case &quot;滿300返100&quot;:<br>                cs = new CashReturn(&quot;300&quot;, &quot;100&quot;);<br>                break;<br>            case &quot;打8折&quot;:<br>                cs = new CashRebate(&quot;0.8&quot;);<br>                break;<br>            default:<br>                break;<br>        &#125;<br>    &#125;<br><br>    public double GetResult(double money)<br>    &#123;<br>        return cs.AcceptCash(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DEMO畫面"><a href="#DEMO畫面" class="headerlink" title="DEMO畫面"></a>DEMO畫面</h2><p><img src="/img/[Design Patterns]StrategyPattern/001.jpg" alt="DEMO畫面"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]SimpleFactoryPattern</title>
      <link href="/2019/06/18/Design-Patterns-SimpleFactoryPattern/"/>
      <url>/2019/06/18/Design-Patterns-SimpleFactoryPattern/</url>
      
        <content type="html"><![CDATA[<p>簡單工廠模式，又稱為靜態工廠模式(Static Factory)，屬於『創建型模式』。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>透過一個專門的類別，來創建其他類別的實體(通常繼承同一個父類別)</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li>工廠(Factory):負責創建所有實體。</li><li>抽象產品(AbstractProduct):一般為具體產品的父類別</li><li>具體產品(ConcreteProduct):繼承抽象產品，並由工廠創建出實體</li></ul><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>客戶端只需選產品，如何製造出來由工廠控制。</li><li>變更與新增具體產品，不需動到客戶端。</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>所有創建都於工廠，若無法正常使用，會影響整個系統</li><li>變更與新增產品就要修改工廠，若產品多會讓工廠過於複雜，不利維護與擴展</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/img/[Design Patterns]SimpleFactoryPattern/001.jpg" alt="UML"></p><h2 id="實際範例-計算器"><a href="#實際範例-計算器" class="headerlink" title="實際範例:計算器"></a>實際範例:計算器</h2><ul><li>抽象產品:Operation</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C#">public abstract class Operation<br>&#123;<br>    private double numberA = 0;<br>    private double numberB = 0;<br><br>    public double NumberA<br>    &#123;<br>        get &#123; return numberA; &#125;<br>        set &#123; numberA = value; &#125;<br>    &#125;<br><br>    public double NumberB<br>    &#123;<br>        get &#123; return numberB; &#125;<br>        set &#123; numberB = value; &#125;<br>    &#125;<br><br>    public abstract double GetResult();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具體產品: +-*/</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class OperationAdd : Operation<br>&#123;<br>    public override double GetResult()<br>    &#123;<br>        try<br>        &#123;<br>            double result = 0;<br>            result = NumberA + NumberB;<br>            return result;<br>        &#125;<br>        catch (Exception ex)<br>        &#123;<br>            throw ex;<br>        &#125;<br>    &#125;<br>&#125;<br><br>public class OperationSub : Operation<br>&#123;<br>    public override double GetResult()<br>    &#123;<br>        try<br>        &#123;<br>            double result = 0;<br>            result = NumberA - NumberB;<br>            return result;<br>        &#125;<br>        catch (Exception ex)<br>        &#123;<br>            throw ex;<br>        &#125;<br>    &#125;<br>&#125;<br><br>public class OperationMul : Operation<br>&#123;<br>    public override double GetResult()<br>    &#123;<br>        try<br>        &#123;<br>            double result = 0;<br>            result = NumberA * NumberB;<br>            return result;<br>        &#125;<br>        catch (Exception ex)<br>        &#123;<br>            throw ex;<br>        &#125;<br>    &#125;<br>&#125;<br><br>public class OperationDiv : Operation<br>&#123;<br>    public override double GetResult()<br>    &#123;<br>        try<br>        &#123;<br>            double result = 0;<br><br>            if (NumberB.Equals(0))<br>                throw new Exception(&quot;除數不能為0&quot;);<br><br>            result = NumberA / NumberB;<br>            return result;<br>        &#125;<br>        catch (Exception ex)<br>        &#123;<br>            throw ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>工廠</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class OperationFactory<br>&#123;<br>    public static Operation CreateOperate(string operate)<br>    &#123;<br>        try<br>        &#123;<br>            Operation oper = null;<br><br>            switch (operate)<br>            &#123;<br>                case &quot;+&quot;:<br>                    oper = new OperationAdd();<br>                    break;<br>                case &quot;-&quot;:<br>                    oper = new OperationSub();<br>                    break;<br>                case &quot;*&quot;:<br>                    oper = new OperationMul();<br>                    break;<br>                case &quot;/&quot;:<br>                    oper = new OperationDiv();<br>                    break;<br>                default:<br>                    throw new Exception(&quot;不支援此運算符號&quot;);<br>            &#125;<br><br>            return oper;<br>        &#125;<br>        catch (Exception ex)<br>        &#123;<br>            throw ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C#">Operation oper;<br>oper = OperationFactory.CreateOperate(&quot;+&quot;);<br>oper.NumberA = 1;<br>oper.NumberB = 2;<br>var addResult = oper.GetResult();<br><br>oper = OperationFactory.CreateOperate(&quot;-&quot;);<br>oper.NumberA = 1;<br>oper.NumberB = 2;<br>var subResult = oper.GetResult();<br><br>oper = OperationFactory.CreateOperate(&quot;*&quot;);<br>oper.NumberA = 1;<br>oper.NumberB = 2;<br>var mulResult = oper.GetResult();<br><br>oper = OperationFactory.CreateOperate(&quot;/&quot;);<br>oper.NumberA = 1;<br>oper.NumberB = 2;<br>var divResult = oper.GetResult();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]設計模式簡介</title>
      <link href="/2019/06/18/Design-Patterns-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E7%B0%A1%E4%BB%8B/"/>
      <url>/2019/06/18/Design-Patterns-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E7%B0%A1%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>設計模式主要是針對軟體設計中反覆出現的各種問題，所提出的解決方案。<br>設計模式能使軟體依賴相對穩定、依賴於抽象，避免緊耦合，增強軟體設計適應變化的能力。</p><a id="more"></a><h2 id="創建型模式"><a href="#創建型模式" class="headerlink" title="創建型模式"></a>創建型模式</h2><ul><li><a href="../Design-Patterns-SimpleFactoryPattern">簡單工廠模式(Simple Factory)</a></li><li>抽象工廠模式(Abstract Factory)</li><li>建造模式(Builder Pattern)</li><li>原型模式(Prototype pattern)</li><li>單例模式(Singleton pattern)</li><li>工廠方法 (Factory Method pattern)</li></ul><h2 id="結構型模式"><a href="#結構型模式" class="headerlink" title="結構型模式"></a>結構型模式</h2><ul><li>適配器模式(Adapter pattern)</li><li>橋接模式(Bridge pattern)</li><li>組合模式(Composite pattern)</li><li><a href="../Design-Patterns-Decorator-Pattern">裝飾模式(Decorator pattern)</a></li><li>外觀模式(Façade pattern)</li><li>享元模式(Flyweight pattern)</li><li><a href="../Design-Patterns-Proxy-Pattern">代理模式(Proxy pattern)</a></li></ul><h2 id="行為型模式"><a href="#行為型模式" class="headerlink" title="行為型模式"></a>行為型模式</h2><ul><li>職責鏈模式(Chain-of-responsibility pattern)</li><li>命令模式(Command pattern)</li><li>翻譯器模式(Interpreter pattern)</li><li>疊代器模式(Iterator pattern)</li><li>中介者模式(Mediator pattern)</li><li>回憶模式(Memento pattern)</li><li>觀察者模式(Observer pattern)</li><li>狀態機模式(State pattern)</li><li><a href="../Design-Patterns-StrategyPattern">策略模式(Strategy pattern)</a></li><li>模板方法模式(Template method pattern)</li><li>參觀者模式(Visitor)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[Redis系列]Redis介紹</title>
      <link href="/2019/06/17/Redis%E7%B3%BB%E5%88%97-Redis%E4%BB%8B%E7%B4%B9/"/>
      <url>/2019/06/17/Redis%E7%B3%BB%E5%88%97-Redis%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<p>Redis是目前非常普遍使用的NoSQL資料庫，在此分享使用心得。<br><a id="more"></a></p><h2 id="Redis-簡介"><a href="#Redis-簡介" class="headerlink" title="Redis 簡介"></a>Redis 簡介</h2><h2 id="Docker-Run-Redis"><a href="#Docker-Run-Redis" class="headerlink" title="Docker Run Redis"></a>Docker Run Redis</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker run -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> -v $PWD/data:/data  -d redis redis-server --appendonly yes<br></code></pre></td></tr></table></figure><p>-p \ # 端口映射 宿主机:容器<br>-v \ # 映射数据目录 rw 为读写<br>redis-server –appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置</p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[VSCode]Visual Studio Code簡介/安裝</title>
      <link href="/2019/06/15/VSCode-Visual-Studio-Code%E7%B0%A1%E4%BB%8B-%E5%AE%89%E8%A3%9D/"/>
      <url>/2019/06/15/VSCode-Visual-Studio-Code%E7%B0%A1%E4%BB%8B-%E5%AE%89%E8%A3%9D/</url>
      
        <content type="html"><![CDATA[<p>Visual Studio Code是一個輕量級但功能強大的源代碼編輯器，可跨OS使用，支援多程式語言，<br>且有各種方便的擴充套件。<br><a id="more"></a></p><h2 id="Visual-Studio-Code特點"><a href="#Visual-Studio-Code特點" class="headerlink" title="Visual Studio Code特點"></a>Visual Studio Code特點</h2><ul><li>輕量: 安裝檔&lt;100 MB，安裝後佔用空間&lt;200 MB</li><li>跨OS: 支持MAC、Linux、Windows</li><li>IntelliSense: 加快開發速度</li><li>debugging: 可以設置中斷點debug</li><li>支持Git版控</li><li>超多擴充套件</li></ul><h2 id="Visual-Studio-Code安裝"><a href="#Visual-Studio-Code安裝" class="headerlink" title="Visual Studio Code安裝"></a>Visual Studio Code安裝</h2><ul><li><p>先到官網下載<br><a href="https://code.visualstudio.com/#built-in-git" title="Visual Studio Code官網" target="_blank" rel="noopener">Visual Studio Code官網</a></p></li><li><p>按下一步，安裝完成</p></li><li><p>隨便找個資料夾按右鍵，就會出現開啟VS Code的選項<br><img src="/img/[VSCode]Visual Studio Code簡介/001.jpg" alt="VS Code"></p></li></ul><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><ul><li><a href="https://code.visualstudio.com/docs" title="VS Code官網文件" target="_blank" rel="noopener">VS Code官網文件</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Hexo]Hexo+Github快速建立Blog</title>
      <link href="/2019/06/15/Hexo-Hexo-Github%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8BBlog/"/>
      <url>/2019/06/15/Hexo-Hexo-Github%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8BBlog/</url>
      
        <content type="html"><![CDATA[<p>使用Hexo blog框架 + Github 快速架設、管理自己的Blog。<br>Hexo 使用 Markdown 解析文章。<br><a id="more"></a></p><h2 id="安裝NodeJS"><a href="#安裝NodeJS" class="headerlink" title="安裝NodeJS"></a>安裝NodeJS</h2><ul><li><p>會使用到npm，所以要先安裝Node.js，先到官網下載<br><a href="https://nodejs.org/en/" title="Node.js官網" target="_blank" rel="noopener">Node.js官網</a></p></li><li><p>直接下一步，安裝完成</p></li></ul><h2 id="使用Visual-Studio-Code-開啟Terminal"><a href="#使用Visual-Studio-Code-開啟Terminal" class="headerlink" title="使用Visual Studio Code 開啟Terminal"></a>使用Visual Studio Code 開啟Terminal</h2><ul><li>安裝hexo-cli</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p><img src="/img/[Hexo]Hexo+Github快速建立Blog/001.jpg" alt="hexo-cli"></p><ul><li>初始化Blog</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo init blog<br></code></pre></td></tr></table></figure><p><img src="/img/[Hexo]Hexo+Github快速建立Blog/002.jpg" alt="init blog"></p><ul><li>切到blog安裝環境</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> blog<br>npm install<br></code></pre></td></tr></table></figure><p><img src="/img/[Hexo]Hexo+Github快速建立Blog/003.jpg" alt="安裝環境"></p><ul><li>試RUN一下</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo s -p <span class="hljs-number">8080</span><br>or<br>hexo s (預設port:<span class="hljs-number">4000</span>)<br><br>s (server)：啟動伺服器<br>-p (–port)：設定你要的port<br></code></pre></td></tr></table></figure><p><img src="/img/[Hexo]Hexo+Github快速建立Blog/004.jpg" alt="RUN"><br><img src="/img/[Hexo]Hexo+Github快速建立Blog/005.jpg" alt="RUN"></p><h2 id="使用Hexo寫Blog"><a href="#使用Hexo寫Blog" class="headerlink" title="使用Hexo寫Blog"></a>使用Hexo寫Blog</h2><ul><li>整體流程: new新文章 –&gt; 編輯 –&gt; 產生靜態檔 –&gt; 發佈</li><li>創建新文章</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo new [layout] "your-article-<span class="hljs-built_in">title</span>"<br></code></pre></td></tr></table></figure><p>文章檔案會在 source/_drafts/、source/_posts/ 或 source/ 下。<br>三種預設 layout: draft(草稿)、post(公開文章) 和page(頁面)，預設是 post。<br>也可以在 scaffolds 中編輯或添加模板。</p><h2 id="編輯文章"><a href="#編輯文章" class="headerlink" title="編輯文章"></a>編輯文章</h2><ul><li><p>使用Markdown</p></li><li><p>插入圖片<br>先在blog/source/下建立img資料夾，將圖片放在此資料夾，在文中引用</p></li></ul><figure class="highlight Markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">![<span class="hljs-string">說明</span>](<span class="hljs-link">/img/文章資料夾/your-image.png</span>)<br></code></pre></td></tr></table></figure><ul><li>產生靜態檔</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo generate<br>or<br>hexo g<br></code></pre></td></tr></table></figure><ul><li>發佈文章</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo deploy<br>or<br>hexo d<br>or<br>hexo -d<br></code></pre></td></tr></table></figure><ul><li>產生靜態檔和發佈文章可以一起執行</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hexo g -d  #=&gt; 產生靜態檔後佈署<br>hexo d -g  #=&gt; 佈署前產生靜態檔<br></code></pre></td></tr></table></figure><ul><li>部屬會依照_config.yml的 deploy 作佈署</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs config"># Deployment<br>deploy:<br>  type: git<br>  repo: https://github.com/your-github-username/your-github-username.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Git]TortoiseGit</title>
      <link href="/2019/06/15/Git-TortoiseGit/"/>
      <url>/2019/06/15/Git-TortoiseGit/</url>
      
        <content type="html"><![CDATA[<p>TortoiseGit是用來使用GitHub版本控管功能的工具，下面簡單介紹安裝過程和如何Clone Code。<br><a id="more"></a></p><h2 id="安裝Git-for-Windows"><a href="#安裝Git-for-Windows" class="headerlink" title="安裝Git for Windows"></a>安裝Git for Windows</h2><ul><li><p>先到官網下載<br><a href="https://gitforwindows.org/" title="Git for Windows官網" target="_blank" rel="noopener">Git for Windows官網</a></p></li><li><p>直接按下一步，安裝完成</p></li></ul><h2 id="安裝TortoiseGit"><a href="#安裝TortoiseGit" class="headerlink" title="安裝TortoiseGit"></a>安裝TortoiseGit</h2><ul><li><p>一樣先到官網下載<br><a href="https://tortoisegit.org/download/" title="TortoiseGit官網" target="_blank" rel="noopener">TortoiseGit官網</a></p></li><li><p>也是直接下一步，安裝完成</p></li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li><p>先到GitHub複製網址<br><img src="/img/[Git]TortoiseGit/001.jpg" alt="GitHub複製網址"></p></li><li><p>到資料夾按右鍵<br><img src="/img/[Git]TortoiseGit/002.jpg" alt="複製"></p></li><li><p>開始Clone<br><img src="/img/[Git]TortoiseGit/003.jpg" alt="下載"><br><img src="/img/[Git]TortoiseGit/004.jpg" alt="下載完畢"></p></li><li><p>這樣就可以開始改Code了</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Docker]Docker for Windows 10</title>
      <link href="/2019/04/29/Docker-Docker-for-Windows-10/"/>
      <url>/2019/04/29/Docker-Docker-for-Windows-10/</url>
      
        <content type="html"><![CDATA[<p>Docker必須跑在Linux上，若想要在Windows上跑Docker，<br>就要利用Hyper-V跑一個Linux，如此就可以在Windows上跑Docker</p><a id="more"></a><h2 id="必要條件"><a href="#必要條件" class="headerlink" title="必要條件"></a>必要條件</h2><ul><li>Windows10 專業版或企業版(版本 1607年）</li><li>HYPER-V已啟用<ul><li>輸入commend: systeminfo，檢查是否啟用，若都為”是”，則可以使用<br><img src="/img/[Docker]Docker for Windows 10/001.jpg" alt="HYPER-V已啟用"></li><li>若沒啟用可到程式與功能–&gt;開啟或關閉Windows功能–&gt;勾選Hyper-V確定安裝，<br>並重啟電腦<br><img src="/img/[Docker]Docker for Windows 10/002.jpg" alt="HYPER-V啟用"><br><img src="/img/[Docker]Docker for Windows 10/003.jpg" alt="HYPER-V啟用"><br><img src="/img/[Docker]Docker for Windows 10/004.jpg" alt="HYPER-V啟用"></li></ul></li></ul><h2 id="安裝Docker-for-Windows"><a href="#安裝Docker-for-Windows" class="headerlink" title="安裝Docker for Windows"></a>安裝Docker for Windows</h2><ul><li><p>下載Docker Desktop for Windows(需註冊docker hub帳號)<br><a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows" title="https://hub.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">Docker Desktop for Windows</a></p></li><li><p>安裝完成<br><img src="/img/[Docker]Docker for Windows 10/005.jpg" alt="安裝完成"><br><img src="/img/[Docker]Docker for Windows 10/006.jpg" alt="安裝完成"></p></li><li><p>可以切換Windows Containers，不過我們還是先玩玩Linux Containers就行了<br><img src="/img/[Docker]Docker for Windows 10/007.jpg" alt="切換"></p></li></ul><h2 id="測試安裝是否正常"><a href="#測試安裝是否正常" class="headerlink" title="測試安裝是否正常"></a>測試安裝是否正常</h2><ul><li>Run docker –version 看Docker版本</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt; docker --version<br></code></pre></td></tr></table></figure><p>Docker version 18.09.2, build 6247962</p><ul><li>從 Docker Hub 拉取 hello-world image，並Run容器(要先登入才拉的到Image)</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt; docker login<br>&gt; docker pull hello-world<br></code></pre></td></tr></table></figure><p>Using default tag: latest<br>latest: Pulling from library/hello-world<br>1b930d010525: Pull complete<br>Digest: sha256:92695bc579f31df7a63da6922075d0666e565ceccad16b59c3374d2cf4e8e50e<br>Status: Downloaded newer image for hello-world:latest</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt; docker run hello-world<br></code></pre></td></tr></table></figure><p>Hello from Docker!<br>This message shows that your installation appears to be working correctly.</p><h2 id="docker-基本指令"><a href="#docker-基本指令" class="headerlink" title="docker 基本指令"></a>docker 基本指令</h2><ul><li>image list</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker image ls<br></code></pre></td></tr></table></figure><ul><li>container list</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker container ls --all<br></code></pre></td></tr></table></figure><ul><li>將沒有使用的container 刪除</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker system prune<br></code></pre></td></tr></table></figure><ul><li>移除Image</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker image rm hello-world<br></code></pre></td></tr></table></figure><ul><li>各層級Help</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt; docker --<span class="hljs-built_in">help</span><br>&gt; docker container --<span class="hljs-built_in">help</span><br>&gt; docker container ls --<span class="hljs-built_in">help</span><br>&gt; docker run --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><h3 id="Docker-Desktop-for-Windows"><a href="#Docker-Desktop-for-Windows" class="headerlink" title="Docker Desktop for Windows"></a>Docker Desktop for Windows</h3><p><a href="https://docs.docker.com/docker-for-windows/" title="https://docs.docker.com/docker-for-windows/" target="_blank" rel="noopener">Docker Desktop for Windows</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Tools]AutoMapper</title>
      <link href="/2019/04/24/Tools-AutoMapper/"/>
      <url>/2019/04/24/Tools-AutoMapper/</url>
      
        <content type="html"><![CDATA[<p>AutoMapper主要用來處理類別間的轉換<br><a href="https://docs.automapper.org/en/stable/index.html" title="https://docs.automapper.org/en/stable/index.html" target="_blank" rel="noopener">官方連結</a></p><a id="more"></a><h2 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h2><ul><li>建立一個Model</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Domain.Model<br>&#123;<br>    public class MemberInfo<br>    &#123;<br>        public int MemberID &#123; get; set; &#125;<br><br>        public string NickName &#123; get; set; &#125;<br><br>        public string Email &#123; get; set; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>建立對應的ViewModel，只需要顯示MemberID和NickName</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App<br>&#123;<br>    public class MemberInfoViewModel<br>    &#123;<br>        public int MemberID &#123; get; set; &#125;<br><br>        public string NickName &#123; get; set; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>一般類別轉換</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C#">private void TransferClass()<br>&#123;<br>    MemberInfo infoModel = new MemberInfo()<br>    &#123;<br>        MemberID = 123,<br>        NickName = &quot;abc&quot;,<br>        Email = &quot;abc@xxx.com&quot;<br>    &#125;;<br><br>    MemberInfoViewModel infoViewModel = new MemberInfoViewModel<br>    &#123;<br>        MemberID = infoModel.MemberID,<br>        NickName = infoModel.NickName<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>AutoMapper寫法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#">private void TransferClass()<br>&#123;<br>    Mapper.CreateMap&lt;MemberInfo, MemberInfoViewModel&gt;();<br><br>    MemberInfo infoModel = new MemberInfo()<br>    &#123;<br>        MemberID = 123,<br>        NickName = &quot;abc&quot;,<br>        Email = &quot;abc@xxx.com&quot;<br>    &#125;;<br><br>    MemberInfoViewModel infoViewModel = Mapper.Map&lt;MemberInfoViewModel&gt;(infoModel);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Linq轉換IEnumerable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C#">public void TransferClassList()<br>&#123;<br>    List&lt;MemberInfo&gt; infoModels = new List&lt;MemberInfo&gt;()<br>    &#123;<br>        new MemberInfo<br>        &#123;<br>            MemberID = 123,<br>            NickName = &quot;abc&quot;,<br>            Email = &quot;abc@xxx.com&quot;<br>        &#125;,<br>        new MemberInfo<br>        &#123;<br>            MemberID = 456,<br>            NickName = &quot;def&quot;,<br>            Email = &quot;def@xxx.com&quot;<br>        &#125;<br>    &#125;;<br><br>    var infoViewModels = infoModels.Select(x =&gt; new MemberInfoViewModel<br>    &#123;<br>        MemberID = x.MemberID,<br>        NickName = x.NickName<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>AutoMapper轉換IEnumerable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C#">public void TransferClassList()<br>&#123;<br>    Mapper.CreateMap&lt;IEnumerable&lt;MemberInfo&gt;, IEnumerable&lt;MemberInfoViewModel&gt;&gt;();<br><br>    List&lt;MemberInfo&gt; infoModels = new List&lt;MemberInfo&gt;()<br>    &#123;<br>        new MemberInfo<br>        &#123;<br>            MemberID = 123,<br>            NickName = &quot;abc&quot;,<br>            Email = &quot;abc@xxx.com&quot;<br>        &#125;,<br>        new MemberInfo<br>        &#123;<br>            MemberID = 456,<br>            NickName = &quot;def&quot;,<br>            Email = &quot;def@xxx.com&quot;<br>        &#125;<br>    &#125;;<br><br>    var infoViewModels = Mapper.Map&lt;IEnumerable&lt;MemberInfoViewModel&gt;&gt;(infoModels);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AutoMapper全域設定-如果轉換有多個地方使用，可以寫在全域"><a href="#AutoMapper全域設定-如果轉換有多個地方使用，可以寫在全域" class="headerlink" title="AutoMapper全域設定 : 如果轉換有多個地方使用，可以寫在全域"></a>AutoMapper全域設定 : 如果轉換有多個地方使用，可以寫在全域</h2><ul><li>建立Model、ViewModel</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class MemberInfoModel<br>&#123;<br>    public int MemberID &#123; get; set; &#125;<br><br>    public string NickName &#123; get; set; &#125;<br><br>    public string Email &#123; get; set; &#125;<br><br>    public string ID &#123; get; set; &#125;<br><br>    public string PW &#123; get; set; &#125;<br>&#125;<br><br>public class MemberInfoViewModel<br>&#123;<br>    public int MemberID &#123; get; set; &#125;<br><br>    public string NickName &#123; get; set; &#125;<br><br>    public string UserId &#123; get; set; &#125;<br><br>    public string Password &#123; get; set; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在App_Start新增AutoMapperConfig</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class AutoMapperConfig<br>&#123;<br>    public static void Register()<br>    &#123;<br>        Mapper.Initialize(cfg =&gt;<br>        &#123;<br>            cfg.AllowNullCollections = true;<br>            cfg.AddProfile&lt;MemberInfoProfile&gt;();<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在App_Start新增MemberInfoProfile</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class MemberInfoProfile : Profile<br>&#123;<br>    public MemberInfoProfile()<br>    &#123;<br>        CreateMap&lt;MemberInfoModel, MemberInfoViewModel&gt;()<br>            .ForMember(dest =&gt; dest.Password, opt =&gt; opt.MapFrom(src =&gt; src.PW))<br>            .ForMember(dest =&gt; dest.UserId, opt =&gt; opt.MapFrom(src =&gt; src.ID));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在Global.asax呼叫</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class WebApiApplication : System.Web.HttpApplication<br>&#123;<br>    protected void Application_Start()<br>    &#123;<br>        GlobalConfiguration.Configure(WebApiConfig.Register);<br>        AutoMapperConfig.Register();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C#">// 單個<br>MemberInfoModel infoModel = new MemberInfoModel<br>&#123;<br>    Email = &quot;aaa@xxx.com&quot;,<br>    ID = &quot;aaa&quot;,<br>    MemberID = 1000001,<br>    NickName = &quot;aaa&quot;,<br>    PW = &quot;aaa123456&quot;<br>&#125;;<br><br>var infoViewModel = Mapper.Map&lt;MemberInfoViewModel&gt;(infoModel);<br><br>// List<br>List&lt;MemberInfoModel&gt; infoModels = new List&lt;MemberInfoModel&gt;<br>&#123;<br>    new MemberInfoModel<br>    &#123;<br>        Email = &quot;aaa@xxx.com&quot;,<br>        ID = &quot;aaa&quot;,<br>        MemberID = 1000001,<br>        NickName = &quot;aaa&quot;,<br>        PW = &quot;aaa123456&quot;<br>    &#125;,<br>    new MemberInfoModel<br>    &#123;<br>        Email = &quot;bbb@xxx.com&quot;,<br>        ID = &quot;bbb&quot;,<br>        MemberID = 1000001,<br>        NickName = &quot;bbb&quot;,<br>        PW = &quot;bbb123456&quot;<br>    &#125;<br>&#125;;<br><br>var infoViewModels = Mapper.Map&lt;IEnumerable&lt;MemberInfoViewModel&gt;&gt;(infoModels);<br></code></pre></td></tr></table></figure><h2 id="轉換設定方式"><a href="#轉換設定方式" class="headerlink" title="轉換設定方式"></a>轉換設定方式</h2><ul><li>Ignore: 略過</li><li>MapFrom: 指定對應屬性</li><li>ResolveUsing: 指定自訂的轉換方式</li><li>UseValue: 直接給值</li><li>NullSubstitute: 原始值為空才給值</li><li>Condition: 條件為True才給值</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AutoMapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[C#]Tuple Class</title>
      <link href="/2019/04/23/C-Tuple-Class/"/>
      <url>/2019/04/23/C-Tuple-Class/</url>
      
        <content type="html"><![CDATA[<p>function想要回傳多個值的好用類別<br><a id="more"></a></p><h2 id="舊方法和缺點"><a href="#舊方法和缺點" class="headerlink" title="舊方法和缺點"></a>舊方法和缺點</h2><ul><li>自訂class或struct，將想回傳的值包在裡面<ul><li>有時不是強烈內聚關係，只是單純放在一起，其實並不妥當</li><li>有時只會被這個方法使用，無法重用</li></ul></li><li>透過物件的成員，經過方法後的狀態轉變，再取用<ul><li>若為static方法，可能有thread-safe問題</li><li>回傳值的生命週期應該只在這個方法內</li></ul></li><li>使用 out 或 ref，在呼叫時先傳進來<ul><li>方法外面要先宣告，方法裡面要重新給值</li><li>當回傳多個值會相當礙眼</li></ul></li></ul><h2 id="Tuple-Class-NET-Framework-4-0"><a href="#Tuple-Class-NET-Framework-4-0" class="headerlink" title="Tuple Class(.NET Framework 4.0)"></a>Tuple Class(.NET Framework 4.0)</h2><p><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.tuple?view=netframework-4.8" title="https://docs.microsoft.com/zh-tw/dotnet/api/system.tuple?view=netframework-4.8" target="_blank" rel="noopener">Tuple Class連結</a></p><h3 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Domain.Model<br>&#123;<br>    using System;<br><br>    public class MemberInfo<br>    &#123;<br>        public int MemberID &#123; get; set; &#125;<br><br>        public string NickName &#123; get; set; &#125;<br><br>        public string Email &#123; get; set; &#125;<br>    &#125;<br>&#125;<br><br>namespace App.Domain.Repository<br>&#123;<br>    public interface IMemberInfoRepository<br>    &#123;<br>        Tuple&lt;Exception, MemberInfo&gt; FindMemberInfo(int memberID);<br>    &#125;<br>&#125;<br><br>namespace App.Persistent.SQL<br>&#123;<br>    public class MemberInfoRepository : IMemberInfoRepository<br>    &#123;<br>        private string connectionString;<br><br>        public MemberInfoRepository(string connectionString)<br>        &#123;<br>            this.connectionString = connectionString;<br>        &#125;<br><br>        public Tuple&lt;Exception, MemberInfo&gt; FindMemberInfo(int memberID)<br>        &#123;<br>            try<br>            &#123;<br>                using (var conn = new SqlConnection(this.connectionString))<br>                &#123;<br>                    var result = conn.QueryFirstOrDefault&lt;MemberInfo&gt;(<br>                        &quot;SPName&quot;,<br>                        new<br>                        &#123;<br>                            MemberID = memberID<br>                        &#125;,<br>                        commandType: CommandType.StoredProcedure);<br><br>                    return Tuple.Create&lt;Exception, MemberInfo&gt;(null, result);<br>                &#125;<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                return Tuple.Create&lt;Exception, MemberInfo&gt;(ex, null);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>namespace App.Persistent.Tests<br>&#123;<br>    [TestClass]<br>    public class MemberInfoRepositoryTests<br>    &#123;<br>        private IMemberInfoRepository memberInfoRepo;<br><br>        [TestInitialize]<br>        public void Initialize()<br>        &#123;<br>            this.memberInfoRepo = new MemberInfoRepository(ConfigHelper.SQLConnectionString);<br>        &#125;<br><br>        [TestMethod]<br>        public void FindMemberInfo_Success_Test()<br>        &#123;<br>            // Arrange<br>            int memberID = 100000;<br><br>            // Act<br>            var result = this.memberInfoRepo.FindMemberInfo(memberID);<br><br>            // Assert<br>            Assert.IsNull(result.Item1);<br>            Assert.IsNotNull(result.Item2);<br>            Assert.AreEqual(memberID, result.Item2.MemberID);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="規範建議"><a href="#規範建議" class="headerlink" title="規範建議"></a>規範建議</h3><ul><li>可讀性不佳(C# 7.0可自訂名稱): Tuple的Item不超過3個</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Persistent.SQL<br>&#123;<br>    public class MemberInfoRepository : IMemberInfoRepository<br>    &#123;<br>        private string connectionString;<br><br>        public MemberInfoRepository(string connectionString)<br>        &#123;<br>            this.connectionString = connectionString;<br>        &#125;<br><br>        public (Exception ex, MemberInfo memberInfo) FindMemberInfo(int memberID)<br>        &#123;<br>            try<br>            &#123;<br>                using (var conn = new SqlConnection(this.connectionString))<br>                &#123;<br>                    var result = conn.QueryFirstOrDefault&lt;MemberInfo&gt;(<br>                        &quot;SPName&quot;,<br>                        new<br>                        &#123;<br>                            MemberID = memberID<br>                        &#125;,<br>                        commandType: CommandType.StoredProcedure);<br><br>                    return (null, result);<br>                &#125;<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                return (ex, null);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br>namespace App.Persistent.Tests<br>&#123;<br>    [TestClass]<br>    public class MemberInfoRepositoryTests<br>    &#123;<br>        private IMemberInfoRepository memberInfoRepo;<br><br>        [TestInitialize]<br>        public void Initialize()<br>        &#123;<br>            this.memberInfoRepo = new MemberInfoRepository(ConfigHelper.SQLConnectionString);<br>        &#125;<br><br>        [TestMethod]<br>        public void FindMemberInfo_Success_Test()<br>        &#123;<br>            // Arrange<br>            int memberID = 100000;<br><br>            // Act<br>            var result = this.memberInfoRepo.FindMemberInfo(memberID);<br><br>            // Assert<br>            Assert.IsNull(result.ex);<br>            Assert.IsNotNull(result.memberInfo);<br>            Assert.AreEqual(memberID, result.memberInfo.MemberID);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Summary註解中要說明各個Item代表的意義</li><li>在Persistent中，Item1為Exception，Item2以後為回傳值</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Unit Test]Persistent Unit Test</title>
      <link href="/2019/04/23/Unit-Test-Persistent-Unit-Test/"/>
      <url>/2019/04/23/Unit-Test-Persistent-Unit-Test/</url>
      
        <content type="html"><![CDATA[<p>持久層單元測試範例<br><a id="more"></a></p><h2 id="Domain層"><a href="#Domain層" class="headerlink" title="Domain層"></a>Domain層</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Domain.Model<br>&#123;<br>    using System;<br><br>    public class MemberInfo<br>    &#123;<br>        public int MemberID &#123; get; set; &#125;<br><br>        public string NickName &#123; get; set; &#125;<br><br>        public string Email &#123; get; set; &#125;<br>    &#125;<br>&#125;<br><br>namespace App.Domain.Repository<br>&#123;<br>    public interface IMemberInfoRepository<br>    &#123;<br>        Tuple&lt;Exception, MemberInfo&gt; FindMemberInfo(int memberID);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Persistent層"><a href="#Persistent層" class="headerlink" title="Persistent層"></a>Persistent層</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Persistent.SQL<br>&#123;<br>    public class MemberInfoRepository : IMemberInfoRepository<br>    &#123;<br>        private string connectionString;<br><br>        public MemberInfoRepository(string connectionString)<br>        &#123;<br>            this.connectionString = connectionString;<br>        &#125;<br><br>        public Tuple&lt;Exception, MemberInfo&gt; FindMemberInfo(int memberID)<br>        &#123;<br>            try<br>            &#123;<br>                using (var conn = new SqlConnection(this.connectionString))<br>                &#123;<br>                    var result = conn.QueryFirstOrDefault&lt;MemberInfo&gt;(<br>                        &quot;SPName&quot;,<br>                        new<br>                        &#123;<br>                            MemberID = memberID<br>                        &#125;,<br>                        commandType: CommandType.StoredProcedure);<br><br>                    return Tuple.Create&lt;Exception, MemberInfo&gt;(null, result);<br>                &#125;<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                return Tuple.Create&lt;Exception, MemberInfo&gt;(ex, null);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h2><ul><li>在AppLib下新增ConfigHelper</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Persistent.Tests.AppLib<br>&#123;<br>    internal static class ConfigHelper<br>    &#123;<br>        public static readonly string MongoDBConnectionString = &quot;mongodb://xxx.xxx.xx.xx:27017/&quot;;<br><br>        public static string SQLConnectionString = @&quot;Data Source=(localdb)\ProjectsV13;Initial Catalog=xxx;Integrated Security=True&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>新增單元測試</li></ul><p><img src="/img/[Unit Test]Persistent Unit Test/001.jpg" alt="新增單元測試"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Persistent.Tests<br>&#123;<br>    [TestClass]<br>    public class MemberInfoRepositoryTests<br>    &#123;<br>        private IMemberInfoRepository memberInfoRepo;<br><br>        [TestInitialize]<br>        public void Initialize()<br>        &#123;<br>            this.memberInfoRepo = new MemberInfoRepository(ConfigHelper.SQLConnectionString);<br>        &#125;<br><br>        [TestMethod]<br>        public void FindMemberInfo_Success_Test()<br>        &#123;<br>            // Arrange<br>            int memberID = 100000;<br><br>            // Act<br>            var result = this.memberInfoRepo.FindMemberInfo(memberID);<br><br>            // Assert<br>            Assert.IsNull(result.Item1);<br>            Assert.IsNotNull(result.Item2);<br>            Assert.AreEqual(memberID, result.Item2.MemberID);<br>        &#125;<br><br>        [TestMethod]<br>        public void FindMemberInfo_Exception_Test()<br>        &#123;<br>            // Arrange<br>            int memberID = 100000;<br><br>            // Act<br>            var result = this.memberInfoRepo.FindMemberInfo(memberID);<br><br>            // Assert<br>            Assert.IsNotNull(result.Item1);<br>            Assert.IsNull(result.Item2);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Unit Test]MS Unit Test</title>
      <link href="/2019/04/23/Unit-Test-MS-Unit-Test/"/>
      <url>/2019/04/23/Unit-Test-MS-Unit-Test/</url>
      
        <content type="html"><![CDATA[<p>介紹透過Microsoft Visual Studio建立單元測試專案<br><a id="more"></a></p><h2 id="建立單元測試專案"><a href="#建立單元測試專案" class="headerlink" title="建立單元測試專案"></a>建立單元測試專案</h2><p><img src="/img/[Unit Test]MS Unit Test/001.jpg" alt="建立單元測試專案"></p><h2 id="主要元件"><a href="#主要元件" class="headerlink" title="主要元件"></a>主要元件</h2><p><img src="/img/[Unit Test]MS Unit Test/002.jpg" alt="主要元件"></p><h2 id="常用Attribute"><a href="#常用Attribute" class="headerlink" title="常用Attribute"></a>常用Attribute</h2><ul><li>TestClass: 內涵測試方法的類別</li><li>TestMethod: 測試最小單位，需放在測試類別中</li><li>AssemblyInitialize: 在該組件所有測試前，用來配置組件所使用的資源</li><li>ClassInitialize: 在該類別所有測試前，用來配置類別所使用的資源</li><li>TestInitialize: 在測試方法執行前，用來配置測試方法所使用的資源</li><li>TestCleanup: 在測試方法執行後，用來釋放測試方法所使用的資源</li><li>ClassCleanup: 在該類別所有測試後，用來釋放類別所使用的資源</li><li>AssemblyCleanup: 該組件所有測試後，用來釋放組件所使用的資源</li></ul><h2 id="Assert類別"><a href="#Assert類別" class="headerlink" title="Assert類別"></a>Assert類別</h2><ul><li>AreEqual: 兩物件是否相等</li><li>AreNotEqual: 兩物件是否不相等</li><li>IsTrue: 結果是否為True</li><li>IsFalse: 結果是否為False</li><li>IsNull: 結果是否為Null</li><li>IsNotNull: 結果是否不為Null</li><li>…</li></ul><p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.assert?view=mstest-net-1.3.2" title="參考網址" target="_blank" rel="noopener">Assert類別連結</a></p><h2 id="如何測試-還可以Debug哦"><a href="#如何測試-還可以Debug哦" class="headerlink" title="如何測試(還可以Debug哦~)"></a>如何測試(還可以Debug哦~)</h2><ul><li><p>測試總管<br><img src="/img/[Unit Test]MS Unit Test/003.jpg" alt="測試總管"></p></li><li><p>方法上 或 按右鍵<br><img src="/img/[Unit Test]MS Unit Test/004.jpg" alt="測試總管"><br><img src="/img/[Unit Test]MS Unit Test/005.jpg" alt="測試總管"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Unit Test]AAA原則</title>
      <link href="/2019/04/23/Unit-Test-AAA%E5%8E%9F%E5%89%87/"/>
      <url>/2019/04/23/Unit-Test-AAA%E5%8E%9F%E5%89%87/</url>
      
        <content type="html"><![CDATA[<p>簡單介紹單元測試的一些基本原則<br><a id="more"></a></p><h2 id="基本原則"><a href="#基本原則" class="headerlink" title="基本原則"></a>基本原則</h2><ul><li>正面測試</li><li>反面測試</li><li>例外測試</li><li>不需追求涵蓋率，只測試有邏輯的方法</li><li>測試方法命名要明確</li></ul><h2 id="AAA原則"><a href="#AAA原則" class="headerlink" title="AAA原則"></a>AAA原則</h2><ul><li>Arrange: 初始化物件、要用到的參數</li><li>Act: 呼叫要測試的方法</li><li>Assert: 驗證測試結果</li></ul><h2 id="簡單範例"><a href="#簡單範例" class="headerlink" title="簡單範例"></a>簡單範例</h2><ul><li>主程式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App<br>&#123;<br>    public class Calculator<br>    &#123;<br>        public int Add(int x, int y)<br>        &#123;<br>            try<br>            &#123;<br>                return x + y;<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                throw ex;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>測試程式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace App.Tests<br>&#123;<br>    [TestClass()]<br>    public class CalculatorTests<br>    &#123;<br>        [TestMethod()]<br>        public void Add_Success_Test()<br>        &#123;<br>            // Arrange<br>            Calculator calc = new Calculator();<br>            int x = 1;<br>            int y = 2;<br>            int expected = 3;<br><br>            // Act<br>            int actual = calc.Add(x, y);<br><br>            // Assert<br>            Assert.AreEqual(expected, actual);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]Publish/Subscribe Pattern</title>
      <link href="/2019/04/22/Design-Patterns-Publish-Subscribe-Pattern/"/>
      <url>/2019/04/22/Design-Patterns-Publish-Subscribe-Pattern/</url>
      
        <content type="html"><![CDATA[<p>發佈/訂閱模式 (Publish/Subscribe Pattern)在實務上，<br>通常被指為建立事件驅動(Event-driven)或訊息導向軟體的訊息傳遞模式，<br>適合拿來做不同服務間的訊息傳遞或狀態同步</p><a id="more"></a><h2 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h2><ul><li>Message: 傳送的訊息</li><li>Topic: 可以被訂閱的實體</li><li>Subscription: Topic 跟 Subscriber 之間的實體</li><li>Publisher: 提供並發送訊息到Topic</li><li>Subscriber: 訂閱Topic的單位</li></ul><h2 id="簡易情境"><a href="#簡易情境" class="headerlink" title="簡易情境"></a>簡易情境</h2><p><img src="/img/[Design Patterns]Publish Subscribe Pattern/001.jpg" alt="簡易情境"></p><ul><li>Publisher1、Publisher2 可以同時發佈訊息 A、B 到相同的 Topic</li><li>Subscription1 可以給多個Subscriber1、Subscriber2 訂閱</li><li>Subscription2 可以同時訂閱多個Topic</li></ul><h2 id="Message的生命週期"><a href="#Message的生命週期" class="headerlink" title="Message的生命週期"></a>Message的生命週期</h2><ul><li>Publisher發佈一則訊息</li><li>訊息寫入storage</li><li>Pub/Sub送一個ack給Publisher說收到訊息</li><li>Pub/Sub將訊息傳給Subscriber</li><li>Subscriber送一個ack給Pub/Sub說收到訊息</li></ul><h2 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h2><ul><li><p>push:</p><ul><li>主動</li><li>低流量情形</li></ul></li><li><p>pull:</p><ul><li>被動</li><li>大量的訊息</li><li>很重視效能和訊息傳遞因素</li></ul></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>送達保證1次</li><li>適合傳輸大量且沒有時間排序的資料</li><li>系統、服務間的解耦:透過broker進行解耦，Publisher和Subscriber之間無相依性</li><li>時間的解耦:透過async的方式，使訊息傳遞不需等待</li><li>擴展性高</li><li>順序保證:FIFO</li></ul><h2 id="Event特性"><a href="#Event特性" class="headerlink" title="Event特性"></a>Event特性</h2><ul><li>過去式</li></ul><h2 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a>參考網址</h2><p><a href="http://www.jasongj.com/2015/01/02/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/" title="參考網址" target="_blank" rel="noopener">Kafka深度解析</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Design Patterns]Repository Pattern</title>
      <link href="/2019/04/18/Design-Patterns-Repository-Pattern/"/>
      <url>/2019/04/18/Design-Patterns-Repository-Pattern/</url>
      
        <content type="html"><![CDATA[<p>應用程式隨著雲端發展、分散式架構和資料庫的多樣性，資料來源不會只有一種，<br>為了整合這麼多種資料儲存類型，可以使用Repository Pattern 來切割DAL和BLL</p><a id="more"></a><h2 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h2><ul><li>BLL不直接存取資料，關注點分離</li><li>方便抽換DAL</li><li>方便單元測試</li></ul><h2 id="先定義Model"><a href="#先定義Model" class="headerlink" title="先定義Model"></a>先定義Model</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace WebApp.Domain.Model<br>&#123;<br>    public class MemberInfo<br>    &#123;<br>        public int MemberID &#123; get; set; &#125;<br><br>        public string NickName &#123; get; set; &#125;<br><br>        public string Email &#123; get; set; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建立介面"><a href="#建立介面" class="headerlink" title="建立介面"></a>建立介面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace WebApp.Domain.Repository<br>&#123;<br>    public interface IMemberInfoRepository<br>    &#123;<br>        Tuple&lt;Exception, MemberInfo&gt; GetMemberInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="建立實體"><a href="#建立實體" class="headerlink" title="建立實體"></a>建立實體</h2><ul><li>MSSQL版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace WebApp.Persistent.SQL<br>&#123;<br>    public class MemberInfoRepository : IMemberInfoRepository<br>    &#123;<br>        private string connectionString;<br><br>        public MemberInfoRepository(string connectionString)<br>        &#123;<br>            this.connectionString = connectionString;<br>        &#125;<br><br>        public Tuple&lt;Exception, MemberInfo&gt; GetMemberInfo()<br>        &#123;<br>            try<br>            &#123;<br>                using (var conn = new SqlConnection(this.connectionString))<br>                &#123;<br>                    var result = conn.QueryFirstOrDefault&lt;MemberInfo&gt;(<br>                        &quot;SPName&quot;,<br>                        param,<br>                        commandType: CommandType.StoredProcedure);<br><br>                    return Tuple.Create&lt;Exception, MemberInfo&gt;(null, result);<br>                &#125;<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                return Tuple.Create&lt;Exception, MemberInfo&gt;(ex, null);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Mongo版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace WebApp.Persistent.Mongo<br>&#123;<br>    public class MemberInfoRepository : IMemberInfoRepository<br>    &#123;<br>        private const string collectionName = &quot;MemberInfo&quot;;<br>        private MongoClient client &#123; get; set; &#125;<br>        private IMongoDatabase db &#123; get; set; &#125;<br>        private IMongoCollection&lt;MemberInfo&gt; collection &#123; get; set; &#125;<br><br>        static MemberInfoRepository()<br>        &#123;<br>            BsonClassMap.RegisterClassMap&lt;MemberInfo&gt;(cm =&gt;<br>            &#123;<br>                cm.AutoMap();<br>                cm.SetIgnoreExtraElements(true);<br>            &#125;);<br>        &#125;<br><br>        public MemberInfoRepository(string connectionString, string dbName)<br>        &#123;<br>            client = new MongoClient(connectionString);<br>            db = client.GetDatabase(dbName);<br>            collection = db.GetCollection&lt;MemberInfo&gt;(collectionName);<br>        &#125;<br><br>        public Tuple&lt;Exception, MemberInfo&gt; GetMemberInfo()<br>        &#123;<br>            try<br>            &#123;<br>                var result = this.collection.Aggregate().FirstOrDefault();<br>                return Tuple.Create&lt;Exception, MemberInfo&gt;(null, result);<br>            &#125;<br>            catch (Exception ex)<br>            &#123;<br>                return Tuple.Create&lt;Exception, MemberInfo&gt;(ex, null);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="請搭配Autofac服用"><a href="#請搭配Autofac服用" class="headerlink" title="請搭配Autofac服用"></a>請搭配Autofac服用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Tools]IOC控制反轉 &amp; DI依賴注入 &amp; Autofac</title>
      <link href="/2019/04/17/Tools-IOC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%89-DI%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5-Autofac/"/>
      <url>/2019/04/17/Tools-IOC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%89-DI%E4%BE%9D%E8%B3%B4%E6%B3%A8%E5%85%A5-Autofac/</url>
      
        <content type="html"><![CDATA[<p>IOC(Inversion of Control)控制反轉是物件導向程式設計中的一種設計原則，可以用來減低電腦程式碼之間的耦合度。<br>依賴注入(Dependency Injection)是最常使用的方式。</p><a id="more"></a><h2 id="IOC-Inversion-of-Control"><a href="#IOC-Inversion-of-Control" class="headerlink" title="IOC(Inversion of Control)"></a>IOC(Inversion of Control)</h2><p>以下用程式碼做簡單的範例說明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class ObjectA<br>&#123;<br>    private ObjectB obj = new ObjectB();<br><br>    public void FindSomething()<br>    &#123;<br>        obj.FindB();<br>    &#125;<br>&#125;<br><br>public class ObjectB<br>&#123;<br>    public void FindB()<br>    &#123;<br>        Console.WriteLine(&quot;ObjectB FindB&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ObjectA 使用 ObjectB 的方法去完成一項工作，在 ObjectA 要 new 一個 ObjectB 起來<br>所以在建立 ObjectA 時，也會把 ObjectB 建立起來<br>換句話說，現在沒有 ObjectB 就沒有 ObjectA ， ObjectA 相依於 ObjectB</p><p>如果 ObjectB 需要替換，就必須修改宣告、new 的類型也要修改，可能呼叫的方法也要改，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class ObjectA<br>&#123;<br>    private ObjectC obj = new ObjectC();<br><br>    public void FindSomething()<br>    &#123;<br>        obj.FindC();<br>    &#125;<br>&#125;<br><br>public class ObjectC<br>&#123;<br>    public void FindC()<br>    &#123;<br>        Console.WriteLine(&quot;ObjectC FindC&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比較好的設計方式是相依於介面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C#">public interface IObject<br>&#123;<br>    void Find();<br>&#125;<br><br>public class ObjectA<br>&#123;<br>    private IObject obj = new ObjectB();<br><br>    public void FindSomething()<br>    &#123;<br>        obj.Find();<br>    &#125;<br>&#125;<br><br>public class ObjectB : IObject<br>&#123;<br>    public void Find()<br>    &#123;<br>        Console.WriteLine(&quot;ObjectB Find&quot;);<br>    &#125;<br>&#125;<br><br>public class ObjectC : IObject<br>&#123;<br>    public void Find()<br>    &#123;<br>        Console.WriteLine(&quot;ObjectC Find&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI(Dependency Injection)"></a>DI(Dependency Injection)</h2><p>這樣在抽換物件時，只需要變更建立類型即可，還可以搭配 DI 讓程式碼更靈活<br>常見的注入方式有三種:</p><ul><li>建構子注入，這是最常見的方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class ObjectA<br>&#123;<br>    private IObject obj;<br><br>    public void ObjectA(IObject obj)<br>    &#123;<br>        this.obj = obj;<br>    &#125;<br><br>    public void FindSomething()<br>    &#123;<br>        obj.Find();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>屬性注入，適合相依物件需要與外部互動</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class ObjectA<br>&#123;<br>    private IObject obj;<br><br>    public IObject Obj<br>    &#123;<br>        get<br>        &#123;<br>            return this.obj;<br>        &#125;<br>        set<br>        &#123;<br>            this.obj = value;<br>        &#125;<br>    &#125;<br><br>    public void FindSomething()<br>    &#123;<br>        if (this.obj == null)<br>        &#123;<br>            throw new ArgumentNullException(&quot;obj&quot;, &quot;obj is null&quot;);<br>        &#125;<br>        obj.Find();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>參數注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class ObjectA<br>&#123;<br>    public void FindSomething(IObject obj)<br>    &#123;<br>        if (obj == null)<br>        &#123;<br>            throw new ArgumentNullException(&quot;obj&quot;, &quot;obj is null&quot;);<br>        &#125;<br>        obj.Find();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IOC容器Tool-Autofac"><a href="#IOC容器Tool-Autofac" class="headerlink" title="IOC容器Tool-Autofac"></a>IOC容器Tool-Autofac</h2><h3 id="透過NuGet安裝Autofac套件"><a href="#透過NuGet安裝Autofac套件" class="headerlink" title="透過NuGet安裝Autofac套件"></a>透過NuGet安裝Autofac套件</h3><p><img src="/img/[Tools]IOC控制反轉 &amp; DI依賴注入 &amp; Autofac/001.jpg" alt="Autofac套件"></p><h3 id="依照專案是MVC-或是-WebApi-去安裝整合套件"><a href="#依照專案是MVC-或是-WebApi-去安裝整合套件" class="headerlink" title="依照專案是MVC 或是 WebApi 去安裝整合套件"></a>依照專案是MVC 或是 WebApi 去安裝整合套件</h3><p><img src="/img/[Tools]IOC控制反轉 &amp; DI依賴注入 &amp; Autofac/002.jpg" alt="整合套件"></p><h3 id="在App-Start資料夾下新增一個AutofacConfig"><a href="#在App-Start資料夾下新增一個AutofacConfig" class="headerlink" title="在App_Start資料夾下新增一個AutofacConfig"></a>在App_Start資料夾下新增一個AutofacConfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace WebApi.App_Start<br>&#123;<br>    using System.Reflection;<br>    using System.Web.Mvc;<br>    using Autofac;<br>    using Autofac.Integration.Mvc;<br>    using Autofac.Integration.WebApi;<br><br>    public static class AutofacConfig<br>    &#123;<br>        public static IContainer Container;<br><br>        public static void RegisterContainer()<br>        &#123;<br>            var builder = new ContainerBuilder();<br>            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());<br><br>            builder.RegisterAssemblyTypes(Assembly.Load(&quot;WebApi.Domain&quot;), Assembly.Load(&quot;WebApi.Persistent&quot;))<br>                .WithParameter(&quot;connectionString&quot;, ConfigHelper.MasterDB)<br>                .Where(t =&gt; t.Namespace == &quot;WebApi.Persistent.SQL&quot; || t.Namespace == &quot;WebApi.Domain.Repository&quot;)<br>                .As(t =&gt; t.GetInterfaces().FirstOrDefault(i =&gt; i.Name == $&quot;I&#123;t.Name&#125;&quot;))<br>                .SingleInstance();<br><br>            builder.RegisterAssemblyTypes(Assembly.Load(&quot;WebApi.Domain&quot;), Assembly.Load(&quot;WebApi.Persistent&quot;))<br>                .WithParameter(&quot;connectionString&quot;, ConfigHelper.MongoDBConnectionString)<br>                .WithParameter(&quot;dbName&quot;, ConfigHelper.MongoDBName)<br>                .Where(t =&gt; t.Namespace == &quot;WebApi.Persistent.Mongo&quot; || t.Namespace == &quot;WebApi.Domain.Repository&quot;)<br>                .As(t =&gt; t.GetInterfaces().FirstOrDefault(i =&gt; i.Name == $&quot;I&#123;t.Name&#125;&quot;))<br>                .SingleInstance();<br><br>            Container = builder.Build();<br><br>            var config = GlobalConfiguration.Configuration;<br>            config.DependencyResolver = new AutofacWebApiDependencyResolver(Container);<br>            DependencyResolver.SetResolver(new AutofacDependencyResolver(Container));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在Global的Application-Start啟用Autofac"><a href="#在Global的Application-Start啟用Autofac" class="headerlink" title="在Global的Application_Start啟用Autofac"></a>在Global的Application_Start啟用Autofac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C#">protected void Application_Start()<br>&#123;<br>    GlobalConfiguration.Configure(WebApiConfig.Register);<br>    AutofacConfig.RegisterContainer();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>建構子注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class TestController : ApiController<br>&#123;<br>    private IMemberInfoRepository memberInfoRepo;<br>    public MemberController(IMemberInfoRepository memberInfoRepo)<br>    &#123;<br>        this.memberInfoRepo = memberInfoRepo;<br>    &#125;<br><br>    public Results GetMemberInfo()<br>    &#123;<br>        var findResult = this.memberInfoRepo.GetMemberInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>using</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C#">public class TestController : ApiController<br>&#123;<br>    public Results GetMemberInfo()<br>    &#123;<br>        using (var scope = App_Start.AutofacConfig.Container.BeginLifetimeScope())<br>        &#123;<br>            var memberInfoRepo = scope.Resolve&lt;IMemberInfoRepository&gt;();<br>            var findResult = memberInfoRepo.GetMemberInfo();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Multiple-implementations-of-an-interface-for-Autofac"><a href="#Multiple-implementations-of-an-interface-for-Autofac" class="headerlink" title="Multiple implementations of an interface for Autofac"></a>Multiple implementations of an interface for Autofac</h3><p><a href="https://edo-van-asseldonk.blogspot.com/2013/01/autofac-and-multiple-implementations-of.html" title="參考網址" target="_blank" rel="noopener">https://edo-van-asseldonk.blogspot.com/2013/01/autofac-and-multiple-implementations-of.html</a></p><p><a href="https://autofaccn.readthedocs.io/en/latest/faq/select-by-context.html" title="參考網址" target="_blank" rel="noopener">https://autofaccn.readthedocs.io/en/latest/faq/select-by-context.html</a></p><p><a href="https://www.codeproject.com/Tips/870246/How-to-register-and-use-Multiple-Classes-Implement" title="參考網址" target="_blank" rel="noopener">https://www.codeproject.com/Tips/870246/How-to-register-and-use-Multiple-Classes-Implement</a></p><h3 id="Multiple-implementations-of-an-interface-for-ASP-NET-Core"><a href="#Multiple-implementations-of-an-interface-for-ASP-NET-Core" class="headerlink" title="Multiple implementations of an interface for ASP .NET Core"></a>Multiple implementations of an interface for ASP .NET Core</h3><p><a href="https://dejanstojanovic.net/aspnet/2018/december/registering-multiple-implementations-of-the-same-interface-in-aspnet-core/" title="參考網址" target="_blank" rel="noopener">https://dejanstojanovic.net/aspnet/2018/december/registering-multiple-implementations-of-the-same-interface-in-aspnet-core/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> IOC </tag>
            
            <tag> DI </tag>
            
            <tag> Autofac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Git]Git Flow 開發流程</title>
      <link href="/2019/04/09/Git-Git-Flow-%E9%96%8B%E7%99%BC%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/04/09/Git-Git-Flow-%E9%96%8B%E7%99%BC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>簡單介紹Git Flow開發流程，2010年提出，來源如下:<br><a href="http://nvie.com/posts/a-successful-git-branching-model/" title="參考網址" target="_blank" rel="noopener">http://nvie.com/posts/a-successful-git-branching-model/</a><br><a id="more"></a></p><h1 id="Git-Flow模型"><a href="#Git-Flow模型" class="headerlink" title="Git Flow模型"></a>Git Flow模型</h1><p><img src="/img/[Git]Git Flow 開發流程/001.jpg" alt="GitFlow"></p><h1 id="分支類型"><a href="#分支類型" class="headerlink" title="分支類型"></a>分支類型</h1><h2 id="主要分支"><a href="#主要分支" class="headerlink" title="主要分支"></a>主要分支</h2><ul><li>master:穩定隨時可上線版本，永遠在production-ready狀態</li><li>develop:所有開發的基礎分支</li></ul><h2 id="支援分支"><a href="#支援分支" class="headerlink" title="支援分支"></a>支援分支</h2><ul><li>feature:開發新功能，由develop切出，開發完在合回develop</li><li>release:上線前最後測試版本，由develop將完成的功能合併過來<ul><li>只能修BUG，不可新增功能</li><li>只能修BUG，不可新增功能</li><li>只能修BUG，不可新增功能</li></ul></li><li>hotfix:線上出現緊急問題要處理，由master切出，修復完後需合併回master及develop<ul><li>只能修BUG，不可新增功能</li><li>只能修BUG，不可新增功能</li><li>只能修BUG，不可新增功能</li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>rebase指令可以整理commit紀錄</li><li>使用Pull Request做Code Review</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Tools]DB Migration Tool:dbup</title>
      <link href="/2019/03/21/Tools-DB-Migration-Tool-dbup/"/>
      <url>/2019/03/21/Tools-DB-Migration-Tool-dbup/</url>
      
        <content type="html"><![CDATA[<p>介紹DB Migration工具: DBUp<br><a id="more"></a></p><h1 id="dbup"><a href="#dbup" class="headerlink" title="dbup"></a>dbup</h1><ul><li>用來更新資料庫的工具</li><li>只能往前更新，不能往後回復更新</li></ul><h1 id="dbup-consolescripts"><a href="#dbup-consolescripts" class="headerlink" title="dbup-consolescripts"></a>dbup-consolescripts</h1><ul><li>用來新增一個年月日時分秒_檔名.sql的套件</li></ul><h1 id="建立一個Console專案"><a href="#建立一個Console專案" class="headerlink" title="建立一個Console專案"></a>建立一個Console專案</h1><p><img src="/img/[Tools]DB Migration Tool dbup/001.jpg" alt="Console專案"></p><h1 id="透過NuGet新增dbup和dbup-consolescripts"><a href="#透過NuGet新增dbup和dbup-consolescripts" class="headerlink" title="透過NuGet新增dbup和dbup-consolescripts"></a>透過NuGet新增dbup和dbup-consolescripts</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">install-package dbup<br>install-package dbup-consolescripts<br></code></pre></td></tr></table></figure><h1 id="加入System-Configuration參考"><a href="#加入System-Configuration參考" class="headerlink" title="加入System.Configuration參考"></a>加入System.Configuration參考</h1><p><img src="/img/[Tools]DB Migration Tool dbup/002.jpg" alt="System.Configuration"></p><h1 id="新增連線字串"><a href="#新增連線字串" class="headerlink" title="新增連線字串"></a>新增連線字串</h1><p><img src="/img/[Tools]DB Migration Tool dbup/003.jpg" alt="連線字串"></p><h1 id="修改Program-cs"><a href="#修改Program-cs" class="headerlink" title="修改Program.cs"></a>修改Program.cs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C#">namespace TestSystem.Migration<br>&#123;<br>    using System;<br>    using System.Configuration;<br>    using System.Reflection;<br>    using DbUp;<br><br>    class Program<br>    &#123;<br>        static int Main(string[] args)<br>        &#123;<br>            var connectionString = ConfigurationManager.ConnectionStrings[&quot;ConnectionString&quot;].ToString();<br><br>            var upgrader =<br>                DeployChanges.To<br>                    .SqlDatabase(connectionString)<br>                    .WithScriptsEmbeddedInAssembly(Assembly.GetExecutingAssembly())<br>                    .LogToConsole()<br>                    .Build();<br><br>            var result = upgrader.PerformUpgrade();<br><br>            if (!result.Successful)<br>            &#123;<br>                Console.ForegroundColor = ConsoleColor.Red;<br>                Console.WriteLine(result.Error);<br>                Console.ResetColor();<br>                Console.ReadLine();<br>                return -1;<br>            &#125;<br><br>            Console.ForegroundColor = ConsoleColor.Green;<br>            Console.WriteLine(&quot;Success!&quot;);<br>            Console.ResetColor();<br>            Console.ReadLine();<br>            return 0;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="新增SQL檔案"><a href="#新增SQL檔案" class="headerlink" title="新增SQL檔案"></a>新增SQL檔案</h1><ul><li>透過套件管理器主控台執行New-Migration 名稱, 即可新增一個年月日時分秒_名稱的sql檔案<br><img src="/img/[Tools]DB Migration Tool dbup/004.jpg" alt="SQL檔案"></li></ul><h1 id="按下F5執行資料庫更新"><a href="#按下F5執行資料庫更新" class="headerlink" title="按下F5執行資料庫更新"></a>按下F5執行資料庫更新</h1><p><img src="/img/[Tools]DB Migration Tool dbup/005.jpg" alt="資料庫更新"></p><h1 id="資料庫更新紀錄"><a href="#資料庫更新紀錄" class="headerlink" title="資料庫更新紀錄"></a>資料庫更新紀錄</h1><p><img src="/img/[Tools]DB Migration Tool dbup/006.jpg" alt="資料庫更新紀錄"></p><h1 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h1><ul><li>DB更新有歷程記錄</li><li>快速建立新環境</li><li>避免人為疏失</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> Migration </tag>
            
            <tag> DBUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Knowledge]軟體分層</title>
      <link href="/2019/03/21/Knowledge-%E8%BB%9F%E9%AB%94%E5%88%86%E5%B1%A4/"/>
      <url>/2019/03/21/Knowledge-%E8%BB%9F%E9%AB%94%E5%88%86%E5%B1%A4/</url>
      
        <content type="html"><![CDATA[<p>軟體分層的基本介紹</p><a id="more"></a><h1 id="基本三層式架構"><a href="#基本三層式架構" class="headerlink" title="基本三層式架構"></a>基本三層式架構</h1><p><img src="/img/[Knowledge]軟體分層/001.jpg" alt="三層式架構"></p><ul><li>展示層(Presentation Layer)</li><li>業務邏輯層 (Business Layer)</li><li>資料層 (Data Layer)</li></ul><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>結構簡單，容易理解和開發</li><li>層與層間相依於介面，強化內聚，降低耦合</li><li>資源重用性好</li><li>關注點分離，每一層都可以獨立開發、測試</li><li>提高系統安全性</li><li>便於資料庫抽換</li></ul><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>調整時會比較麻煩、費時</li></ul><h1 id="服務型分層架構"><a href="#服務型分層架構" class="headerlink" title="服務型分層架構"></a>服務型分層架構</h1><p><img src="/img/[Knowledge]軟體分層/002.jpg" alt="服務型分層架構"></p><ul><li>新增服務層 (Service Layer) : 負責把封閉的分層開放給外部使用</li><li>比三層式架構多了點彈性</li></ul><h1 id="領域驅動設計架構"><a href="#領域驅動設計架構" class="headerlink" title="領域驅動設計架構"></a>領域驅動設計架構</h1><ul><li>新增領域層 (Domain Layer) : 專注理解使用者需求</li><li>需要一位領域專家</li></ul><h2 id="優點-1"><a href="#優點-1" class="headerlink" title="優點"></a>優點</h2><ul><li>貼近使用者</li><li>一套流程處理複雜問題</li><li>幫助我們有組織且可測試的程式碼</li><li>好維護</li></ul><h2 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點"></a>缺點</h2><ul><li>需花時間溝通理解</li><li>學習曲線比較高</li><li>不適合無複雜商業邏輯的情境</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Azure]AD整合</title>
      <link href="/2019/03/04/Azure-AD%E6%95%B4%E5%90%88/"/>
      <url>/2019/03/04/Azure-AD%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>WEB整合Azure Active Directory步驟</p><a id="more"></a><h1 id="建立新的Azure-Active-Directory目錄"><a href="#建立新的Azure-Active-Directory目錄" class="headerlink" title="建立新的Azure Active Directory目錄"></a>建立新的Azure Active Directory目錄</h1><ul><li><p>依序選取 建立資源 –&gt; 身分識別 –&gt; Azure Active Directory<br><img src="/img/[Azure]AD整合/001.jpg" alt="建立目錄"></p></li><li><p>輸入組織名稱、初始網域名稱和選擇國家及地區，選取[建立]，注意:初始網域必須是唯一<br><img src="/img/[Azure]AD整合/002.jpg" alt="建立目錄"><br><img src="/img/[Azure]AD整合/003.jpg" alt="建立目錄"></p></li></ul><h1 id="使用新目錄建立群組"><a href="#使用新目錄建立群組" class="headerlink" title="使用新目錄建立群組"></a>使用新目錄建立群組</h1><ul><li><p>切換目錄<br><img src="/img/[Azure]AD整合/004.jpg" alt="建立群組"><br><img src="/img/[Azure]AD整合/005.jpg" alt="建立群組"></p></li><li><p>先建立群組再加入成員<br><img src="/img/[Azure]AD整合/006.jpg" alt="建立群組"><br><img src="/img/[Azure]AD整合/007.jpg" alt="建立群組"><br><img src="/img/[Azure]AD整合/008.jpg" alt="建立群組"></p></li><li><p>新增使用者加入群組，使用預設網域(也可以自訂)<br><img src="/img/[Azure]AD整合/009.jpg" alt="新增使用者"><br><img src="/img/[Azure]AD整合/010.jpg" alt="新增使用者"><br><img src="/img/[Azure]AD整合/011.jpg" alt="新增使用者"></p></li><li><p>註冊應用程式(輸入WEB首頁網址)，驗證重新導向URI加上/.auth/login/aad/callback<br><img src="/img/[Azure]AD整合/012.jpg" alt="註冊應用程式"><br><img src="/img/[Azure]AD整合/013.jpg" alt="註冊應用程式"><br><img src="/img/[Azure]AD整合/014.jpg" alt="註冊應用程式"></p></li><li><p>設定Azure WEB應用程式服務，使用Azure AD驗證<br><img src="/img/[Azure]AD整合/015.jpg" alt="驗證"><br><img src="/img/[Azure]AD整合/016.jpg" alt="驗證"><br><img src="/img/[Azure]AD整合/017.jpg" alt="驗證"><br><img src="/img/[Azure]AD整合/018.jpg" alt="驗證"></p></li><li><p>登入WEB，輸入AD帳號，勾選同意接受<br><img src="/img/[Azure]AD整合/019.jpg" alt="登入"><br><img src="/img/[Azure]AD整合/020.jpg" alt="登入"><br><img src="/img/[Azure]AD整合/021.jpg" alt="登入"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Azure </tag>
            
            <tag> AD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Travel]2018-12-07東京聖誕之旅</title>
      <link href="/2019/01/16/Travel-2018-12-07%E6%9D%B1%E4%BA%AC%E8%81%96%E8%AA%95%E4%B9%8B%E6%97%85/"/>
      <url>/2019/01/16/Travel-2018-12-07%E6%9D%B1%E4%BA%AC%E8%81%96%E8%AA%95%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p>2018-12-07 ~ 2018-12-12<br>跟太座、女兒 一家三口一起到東京過聖誕的一些旅遊心得和紀錄。<br><a id="more"></a></p><h1 id="行前準備"><a href="#行前準備" class="headerlink" title="行前準備"></a>行前準備</h1><ul><li><p>手機網路: 購買飛買家六天卡 2張</p><p><strong><a href="https://new.traveltobuy.com/service/simcard" title="飛買家網頁" target="_blank" rel="noopener">飛買家網頁</a></strong></p></li><li><p>保險: 富邦旅平卡 大人保 100W 小孩保 200W 12/7 12:00~ 12/13 12:00</p><p><strong><a href="https://www.fubon.com/insurance/b2b2c/happy/index.html" title="富邦旅平卡網頁" target="_blank" rel="noopener">富邦旅平卡網頁</a></strong></p></li><li><p>換日幣</p></li><li><p>東京地鐵乘車券48H: KLOOK預定，在成田機場取票(一樓國際航班到達大廳南口EASYGO櫃檯)，通常櫃台都有會說中文的人</p><ul><li>所有東京 Metro 地鐵及都營地鐵綫路</li><li>東京 Metro 地鐵： 銀座線，丸之內線，日比谷線，東西線，千代田線，有樂町線，半藏門線，南北線，副都心線</li><li>都營地鐵： 淺草線，三田線，新宿線，大江戶線</li></ul><p><strong><a href="https://www.klook.com/zh-TW/activity/1552-subway-ticket-tokyo/?krt=r22&amp;krid=5150d19b-455c-475b-4c10-e432afca9a1b" title="KLOOK東京地鐵乘車券網頁" target="_blank" rel="noopener">KLOOK東京地鐵乘車券網頁</a></strong></p></li></ul><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0001.jpg" alt="領券位置"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0002.jpg" alt="領券櫃台"></p><ul><li><p>箱根周遊券2天: KLOOK預定，唯一兌換地點新宿西口小田急旅遊服務中心Sightseeing Service Center West，通常櫃台都有會說中文的人</p><p><strong><a href="https://www.klook.com/zh-TW/activity/821-hakone-transport-day-pass-tokyo/?krt=r22&amp;krid=7182aa2c-8495-4a13-6415-b9c7bfbb1102" title="KLOOK箱根周遊券網頁" target="_blank" rel="noopener">KLOOK箱根周遊券網頁</a></strong></p></li></ul><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0003.jpg" alt="領券位置"></p><ul><li>去程高鐵票: 回程時間不一定，所以沒買，這次去桃園機場是坐高鐵 接 機場捷運</li></ul><h1 id="飛機航班-長榮"><a href="#飛機航班-長榮" class="headerlink" title="飛機航班:長榮"></a>飛機航班:長榮</h1><ul><li>2018-12-07(星期五) BR196  15:20 桃園2航廈 –&gt; 19:20 成田1航廈</li><li>2018-12-12(星期三) BR197  14:00 成田1航廈 –&gt; 15:05 桃園2航廈</li></ul><h1 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h1><ul><li>12-07~12-09 住錦糸町 東京黎凡特東武酒店 高級雙人房 不含早餐(都市景觀)</li><li>12-10 住箱根 ゆとりろ庵箱根強羅 和式榻榻米 1泊2食</li><li>12-11 住錦糸町 東京黎凡特東武酒店 經濟雙床房 不含早餐 (晴空塔景觀)</li></ul><p><strong><a href="https://tw.hotels.com/ho476809/?q-check-out=2019-03-19&amp;q-room-0-child-0-age=2&amp;tab=description&amp;q-room-0-adults=2&amp;YGF=14&amp;q-check-in=2019-03-18&amp;MGT=1&amp;WOE=2&amp;WOD=1&amp;ZSX=0&amp;SYE=3&amp;q-room-0-children=1" title="東京黎凡特東武酒店" target="_blank" rel="noopener">東京黎凡特東武酒店</a></strong></p><p><strong><a href="https://www.yutorelo-an.jp/" title="ゆとりろ庵箱根強羅" target="_blank" rel="noopener">ゆとりろ庵箱根強羅</a></strong></p><h1 id="預計行程"><a href="#預計行程" class="headerlink" title="預計行程"></a>預計行程</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>家 – 搭小黃 –&gt; 台中高鐵站 —-&gt; 桃園高鐵站 – 走路2分鐘 –&gt; 機場捷運 – 約30分鐘 –&gt; 桃園機場2航廈 – 長榮報到 搭飛機 –&gt; 成田機場1航廈 —-&gt; 錦糸町-東武酒店:check in</p><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>錦糸町-東武酒店 —-&gt; 清澄白河:藍瓶咖啡吃早餐 —-&gt; 東京大學:賞銀杏 —-&gt;  新宿:拿箱根周遊券 —-&gt; 原宿:購物  —-&gt; 六本木:賞聖誕燈飾 —-&gt; 錦糸町-東武酒店</p><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>錦糸町-東武酒店 —-&gt; 日比谷公園:賞楓 —-&gt; 押上: 逛晴空塔 —-&gt; 錦糸町: 逛阿卡將 —-&gt; 錦糸町-東武酒店</p><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><p>錦糸町-東武酒店: check out &amp; 寄放大行李 —-&gt; 新宿 —-&gt; 小田急新宿站 —-&gt; 箱根湯本: 寄行李到飯店 &amp; 吃花本店 —-&gt; 箱根神社 —-&gt; 海賊船 元箱根碼頭 —-&gt; 海賊船 桃園台港  —-&gt; 大涌谷 —-&gt; 早雲山車站  —-&gt; 中強羅 —-&gt; ゆとりろ庵箱根強羅:check in &amp; 吃晚餐 &amp; 泡湯</p><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><p>ゆとりろ庵箱根強羅:check out —-&gt; 強羅公園 —-&gt; 強羅 —-&gt; 箱根湯本 —-&gt; 新宿 —-&gt; 汐留 —-&gt; 錦糸町-東武酒店:check in</p><h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><p>錦糸町-東武酒店:check out —-&gt; 成田機場1航廈 —-&gt; 桃園機場2航廈 —-&gt; 機場捷運 —-&gt; 桃園高鐵 —-&gt; 台中高鐵 —-&gt; 家</p><h1 id="實際行程"><a href="#實際行程" class="headerlink" title="實際行程"></a>實際行程</h1><h2 id="第一天-照計畫走"><a href="#第一天-照計畫走" class="headerlink" title="第一天:照計畫走"></a>第一天:照計畫走</h2><p>家 – 搭小黃 –&gt; 台中高鐵站 —-&gt; 桃園高鐵站 – 走路2分鐘 –&gt; 機場捷運 – 約30分鐘 –&gt; 桃園機場2航廈 – 長榮報到 搭飛機 –&gt; 成田機場1航廈 —-&gt; 錦糸町-東武酒店:check in</p><h2 id="第二天-還是愛慢遊"><a href="#第二天-還是愛慢遊" class="headerlink" title="第二天:還是愛慢遊"></a>第二天:還是愛慢遊</h2><p>錦糸町-東武酒店 —-&gt; 東京大學:賞銀杏 &amp; 吃早餐 —-&gt; 新宿:拿箱根周遊券 —-&gt; 原宿:購物  —-&gt; 六本木:賞聖誕燈飾 —-&gt; 錦糸町-東武酒店</p><h2 id="第三天-購物行程"><a href="#第三天-購物行程" class="headerlink" title="第三天:購物行程"></a>第三天:購物行程</h2><p>錦糸町-東武酒店 —-&gt; 押上: 逛晴空塔 —-&gt; 錦糸町: 逛阿卡將 —-&gt; 錦糸町-東武酒店</p><h2 id="第四天-計畫趕不上變化，只好隨機應變"><a href="#第四天-計畫趕不上變化，只好隨機應變" class="headerlink" title="第四天:計畫趕不上變化，只好隨機應變"></a>第四天:計畫趕不上變化，只好隨機應變</h2><p>錦糸町-東武酒店: check out &amp; 寄放大行李 —-&gt; 新宿 —-&gt; 小田急新宿站 —-&gt; 箱根湯本: 寄行李到飯店 &amp; 吃花本店 —-&gt; 御殿場 —-&gt; 強羅 —-&gt; ゆとりろ庵箱根強羅:check in &amp; 吃晚餐 &amp; 泡湯</p><h2 id="第五天-也是隨機應變"><a href="#第五天-也是隨機應變" class="headerlink" title="第五天:也是隨機應變"></a>第五天:也是隨機應變</h2><p>ゆとりろ庵箱根強羅:check out —-&gt; 早雲山車站 —-&gt; 大涌谷 —-&gt; 海賊船 桃園台港 —-&gt; 海賊船 元箱根碼頭 —-&gt; 箱根湯本 —-&gt; 新宿 —-&gt; 錦糸町-東武酒店:check in</p><h2 id="第六天-回家囉"><a href="#第六天-回家囉" class="headerlink" title="第六天:回家囉~"></a>第六天:回家囉~</h2><p>錦糸町-東武酒店:check out —-&gt; 成田機場1航廈 —-&gt; 桃園機場2航廈 —-&gt; 機場捷運 —-&gt; 桃園高鐵 —-&gt; 台中高鐵 —-&gt; 家</p><h1 id="心得感想"><a href="#心得感想" class="headerlink" title="心得感想"></a>心得感想</h1><h2 id="第一天-出發"><a href="#第一天-出發" class="headerlink" title="第一天:出發"></a>第一天:出發</h2><p>往東京出發囉~ 11:00左右從家裡出發搭計程車到台中高鐵站，這次不搭機場接送，因為上次搭有點怕到，司機開好猛，所以改試試 高鐵 + 機場捷運的組合，覺得還不賴。<br>高鐵 台中 11:36 - 桃園 12:18 $485.0<br>桃園高鐵站出來會有往機場捷運的指標，大概走路2分鐘就到了，搭到機場第二航廈，大概30分鐘 $35<br>搭高鐵 + 捷運的好處是快速又不用怕塞車，大推~~~</p><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0071.JPG" alt="機場捷運"></p><p>我們出關後，立馬帶女兒到第二航廈的C3 Hello Kitty候機室，讓他放電一下，希望上機可以順利睡個覺。</p><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0004.JPG" alt="出關"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0005.JPG" alt="Hello Kitty候機室"></p><p>到東京成田機場第一航廈，要先去南口拿東京周遊券，因為到東京比較晚了，在台灣先查好要怎麼到飯店。<br>這次住錦糸町主要是考量房間大小、價格和離車站要近，所以選擇了這間飯店，但缺點就是搭車可能需要轉車。</p><p>方案A:20:30~21:56 JR總武本線 –&gt; 成田線快速 不用轉車直達，最佳方案<br>方案B:20:39~22:19 京成本線快速-&gt; 押上轉車 -&gt;東京Metro地鐵半藏門線普通 趕不上方案A時的替代方案</p><p>雖然最後有搭上方案A，但也是很驚險，主要是我們使用的ICOCA卡金額不足，需要儲值(很多人在排隊儲值)，所以時間要抓充裕一點<br>到飯店Check in後，終於可以休息一下，喝喝水看看東京街景，水啦~</p><p>飯店使用感覺還不錯，床很大、空間跟市區比也是相對大，離車站超近，還有送小孩用品，大推~~</p><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0006.JPG" alt="東京街景"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0007.JPG" alt="東京街景"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0008.JPG" alt="喝喝水"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0009.JPG" alt="浴室"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0010.JPG" alt="小孩用品"></p><h2 id="第二天-慢遊"><a href="#第二天-慢遊" class="headerlink" title="第二天:慢遊"></a>第二天:慢遊</h2><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0011.JPG" alt="東京街景"></p><p>我們習慣都是先排好大概行程後，前一天在討論細調，因為第一天晚到，所以今天休息晚一點，直接跑東大行程，我本來<br>以為東大應該不會逛太久，沒想到 銀杏 太美了，在東大大拍網美照，還討論以後要收集日本各大學景點，<br>哈哈哈哈哈。</p><p><img src="/img/[Travel]2018-12-07東京聖誕之旅/0012.JPG" alt="東大街景"></p><p>從東大赤門進入<br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0013.JPG" alt="東大街景"></p><p>銀杏和天空，好漂亮，天氣真好<br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0014.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0015.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0016.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0017.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0018.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0019.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0020.JPG" alt="東大銀杏"><br><img src="/img/[Travel]2018-12-07東京聖誕之旅/0021.JPG" alt="東大銀杏"></p><h2 id="第三天-1"><a href="#第三天-1" class="headerlink" title="第三天"></a>第三天</h2><p>錦糸町-東武酒店 —-&gt; 押上: 逛晴空塔 —-&gt; 錦糸町: 逛阿卡將 —-&gt; 錦糸町-東武酒店</p><h2 id="第四天-1"><a href="#第四天-1" class="headerlink" title="第四天"></a>第四天</h2><p>錦糸町-東武酒店: check out &amp; 寄放大行李 —-&gt; 新宿 —-&gt; 小田急新宿站 —-&gt; 箱根湯本: 寄行李到飯店 &amp; 吃花本店 —-&gt; 御殿場 —-&gt; 強羅 —-&gt; ゆとりろ庵箱根強羅:check in &amp; 吃晚餐 &amp; 泡湯</p><h2 id="第五天-1"><a href="#第五天-1" class="headerlink" title="第五天"></a>第五天</h2><p>ゆとりろ庵箱根強羅:check out —-&gt; 早雲山車站 —-&gt; 大涌谷 —-&gt; 海賊船 桃園台港 —-&gt; 海賊船 元箱根碼頭 —-&gt; 箱根湯本 —-&gt; 新宿 —-&gt; 錦糸町-東武酒店:check in</p><h2 id="第六天-1"><a href="#第六天-1" class="headerlink" title="第六天"></a>第六天</h2><p>錦糸町-東武酒店:check out —-&gt; 成田機場1航廈 —-&gt; 桃園機場2航廈 —-&gt; 機場捷運 —-&gt; 桃園高鐵 —-&gt; 台中高鐵 —-&gt; 家</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Travel </tag>
            
            <tag> 東京 </tag>
            
            <tag> 東京大學 </tag>
            
            <tag> 銀杏 </tag>
            
            <tag> 箱根 </tag>
            
            <tag> 泡湯 </tag>
            
            <tag> 錦糸町 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Books]重構-改善既有程式設計-Part2</title>
      <link href="/2019/01/04/Books-%E9%87%8D%E6%A7%8B-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-Part2/"/>
      <url>/2019/01/04/Books-%E9%87%8D%E6%A7%8B-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-Part2/</url>
      
        <content type="html"><![CDATA[<p>重點整理第二Part</p><a id="more"></a><h1 id="Chapter-2-重構原則"><a href="#Chapter-2-重構原則" class="headerlink" title="Chapter 2: 重構原則"></a>Chapter 2: 重構原則</h1><h2 id="何謂重構"><a href="#何謂重構" class="headerlink" title="何謂重構"></a>何謂重構</h2><ul><li>名詞:對軟體內部結構的一種調整，目的是在不改變”軟體之可察行為”前提下，提高其可理解性，降低其修改成本</li><li>動詞:使用一系列重構準則(手法)，在不改變”軟體之可察行為”前提下，調整其結構</li><li>更高效且受控的程式碼整理技術</li><li>重構目的<ol><li>使軟體更容易理解且修改</li><li>效率最佳化</li></ol></li><li>重構不會改變軟體”可受觀察之行為”</li></ul><h2 id="為何重構"><a href="#為何重構" class="headerlink" title="為何重構"></a>為何重構</h2><ul><li>重構是個工具，可以幫助你始終良好的控制自己的程式碼<ul><li>重構改進軟體設計 : 經常性的重構可以幫助程式碼維持該有的型態，改進設計的重要方向就是消除重複程式碼</li><li>重構使軟體更易被理解 : 讓未來的開發者好理解，協助自己理解不熟悉的程式碼(擦掉窗戶上的污垢，使你看得更遠)</li><li>重構助你找到Bugs : 對程式碼的理解可以幫助找到Bugs，更有效地寫出強固穩健的程式碼</li><li>重構助你提高開發速度 : 良好設計是快速軟體開發的根本</li></ul></li></ul><h2 id="何時重構"><a href="#何時重構" class="headerlink" title="何時重構"></a>何時重構</h2><ul><li>重構應該隨時隨地進行</li><li>三次法則 : 事不過三，三則重構</li><li>添加功能時一併重構 : 增加理解要修改的程式碼，讓未來新增特性可以更輕鬆，最主要原因是這是最快速流暢的過程</li><li>修補錯誤時一併重構 : 增加可讀性，更容易找到Bugs</li><li>Code Reviews時一併重構 : 有助於開發團隊傳播知識和理解大型軟體系統，和團隊進行設計複審和個別複審者進行程式碼複審</li><li>為什麼重構有用<ul><li>程式困難修改的原因 :<ul><li>難以閱讀的程式，難以修改</li><li>邏輯重複得程式，難以修改</li><li>添加新行為時需要修改既有程式碼，難以修改</li><li>帶複雜條件邏輯的程式，難以修改</li></ul></li><li>希望程式 :<ul><li>容易閱讀</li><li>相同邏輯都只在唯一地點</li><li>新的改動不會危及現有行為</li><li>盡可能簡單表達條件邏輯</li></ul></li><li>它在一個可執行的程式上進行，企圖在”不改變程式行為”賦予上述美好性質，讓我們保持高速開發，增加程式價值</li></ul></li></ul><h2 id="怎麼跟主管說"><a href="#怎麼跟主管說" class="headerlink" title="怎麼跟主管說"></a>怎麼跟主管說</h2><ul><li>品質驅動 : 技術複審是減少錯誤、提供開發速度的一條重要途徑，重構可以做為複審的一個方法</li><li>進度驅動 : 不要跟長官說，能在時程內完工就行了，怎麼做就自己決定</li><li>間接層價值<ul><li>允許邏輯共享</li><li>分開解釋意圖和實作</li><li>將變化加以隔離</li><li>將條件邏輯加以編碼</li></ul></li><li>找出不值得的間接層(寄生式間接層)並拿掉</li></ul><h2 id="重構的難題"><a href="#重構的難題" class="headerlink" title="重構的難題"></a>重構的難題</h2><ul><li>資料庫 :<ul><li>大多數商用程式都與DB Schema緊密耦合</li><li>資料遷移(Migration)</li><li>解決辦法之一: 在物件模型和資料庫模型間插入一個分隔層，這樣就可以各自變化，會增加系統複雜度，但提高靈活度</li></ul></li><li>修改已發佈介面 :<ul><li>必須同時維護新舊兩個介面，直到所有用戶都改好</li><li>讓舊介面呼叫新介面</li><li>使用Obsolete Or Deprecation標記</li><li>盡量不要發佈介面</li></ul></li><li>難以藉由重構手法完成的設計改動</li><li>何時不該重構?<ul><li>程式碼不能正常運作 : 重寫</li><li>先重構為”封裝良好的小型組件”，在判斷組件是要重構還是重寫</li><li>專案已近最後期限，也避免重構</li></ul></li></ul><h2 id="重構與設計"><a href="#重構與設計" class="headerlink" title="重構與設計"></a>重構與設計</h2><ul><li>彼此互補</li><li>適當的預先設計節省回頭工的高額成本，再搭配重構</li><li>持續重構可以應付變化帶來的風險，當下只需構築可執行的最簡化系統</li><li>請實際測量效率，不要臆測，通常都是錯的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Text">有了設計，可以我思考更快，但是其中充滿小漏洞 -- Alistair Cockburn<br></code></pre></td></tr></table></figure><h2 id="重構與效率-性能-Performance"><a href="#重構與效率-性能-Performance" class="headerlink" title="重構與效率/性能(Performance)"></a>重構與效率/性能(Performance)</h2><ul><li>時間預算法 : 用於效率要求極高的即時系統，分解設計時要做好預算，預先分配一定資源，資訊系統通常不用那麼高效</li><li>持續關切法 : 任何人在任何時間做任何事都要設法保持系統高效率，通常會讓程式更複雜、難以維護，因而減緩開發速度</li><li>關於效率 : 大半時間都耗在一小半程式碼，若所有程式碼都優化會有90%都是浪費時間</li><li>以一種”良好的分解方式”建造自己的程式，再用工具找出效率熱點，並集中關切</li><li>短程來看，重構會使軟體變慢，但軟體效率調整更容易</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><ul><li>事不過三，三則重構</li><li>相關技術 : UML示意圖，CRC卡，極限編程(Extreme Programming)，搭檔編程(Pair Programming)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Books </tag>
            
            <tag> Refactoring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Books]重構-改善既有程式設計-Part1</title>
      <link href="/2019/01/03/Books-%E9%87%8D%E6%A7%8B-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-Part1/"/>
      <url>/2019/01/03/Books-%E9%87%8D%E6%A7%8B-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-Part1/</url>
      
        <content type="html"><![CDATA[<p>這是一篇重點整理</p><a id="more"></a><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><ul><li>重構必須系統化進行，否則只是在自掘墳墓</li><li>重構準則幫你一次一小步修改程式碼，減少過程中的風險</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什麼是重構-在程式碼寫好後改進它的設計"><a href="#什麼是重構-在程式碼寫好後改進它的設計" class="headerlink" title="什麼是重構(在程式碼寫好後改進它的設計)"></a>什麼是重構(在程式碼寫好後改進它的設計)</h2><ul><li>在不改變程式碼外在行為的前提上，對程式碼做出修改，以改進程式碼的內部結構</li><li>是一種有紀律、經過訓練、有條不紊的程式整理方法(可以將引入錯誤機率降到最低)</li><li><p>設計不再是一切動作的前提，透過持續重構，可以在整個開發過程逐漸浮現出來</p><p><strong><font color="red">這些重構準則不針對並行(concurrent)或分散式(distributed)編程<font></font></font></strong></p></li></ul><h1 id="Chapter-1-重構的第一個案例"><a href="#Chapter-1-重構的第一個案例" class="headerlink" title="Chapter 1: 重構的第一個案例"></a>Chapter 1: 重構的第一個案例</h1><ul><li>第一步:建立一組可靠的測試環境，需有自我檢測(self-checking)能力</li><li>分解並重組</li><li>一次修改一小部分並測試，測試通過後再修改</li><li>重構技術係以微小的步伐修改程式，使得犯下錯誤很容易被發現</li><li>可以使用重構工具降低錯誤: Refactoring Browser、ReSharper</li><li>好的程式碼應該清楚表達出自己的功能，變數名稱是程式碼清晰的關鍵</li><li>程式碼應該表現自己的目的</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><ul><li>測試、小修改、測試、小修改….</li><li>相關技術 : Disign Patterns之狀態模式</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Books </tag>
            
            <tag> Refactoring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GCP]Use XShell Connect To GCE</title>
      <link href="/2018/12/14/GCP-Use-XShell-Connect-To-GCE/"/>
      <url>/2018/12/14/GCP-Use-XShell-Connect-To-GCE/</url>
      
        <content type="html"><![CDATA[<p>手把手創建Linux GCE，先使用ssh Key登入，幫root設定密碼，順便優化回應慢的問題<br><a id="more"></a></p><h1 id="在GCE上創建CentOS-7的VM-Instance"><a href="#在GCE上創建CentOS-7的VM-Instance" class="headerlink" title="在GCE上創建CentOS 7的VM Instance"></a>在GCE上創建CentOS 7的VM Instance</h1><ul><li>建立執行個體</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/001.jpg" alt="執行個體"></p><ul><li>根據需求勾選防火牆設定</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/002.jpg" alt="防火牆"></p><ul><li>啟用防刪除功能，之後要刪除要先將此功能停掉，才可以刪除</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/003.jpg" alt="防刪除"></p><ul><li>可以設定此執行個體用的SSH Key，也可以用全域</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/004.jpg" alt="SSHKey"></p><ul><li>建立其他硬碟</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/005.jpg" alt="硬碟"></p><ul><li>點建立，完成建立一個VM Instance</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/006.jpg" alt="建立完成"></p><h1 id="使用XShell產生SSH-Key並連線"><a href="#使用XShell產生SSH-Key並連線" class="headerlink" title="使用XShell產生SSH Key並連線"></a>使用XShell產生SSH Key並連線</h1><ul><li>使用外部IP(臨時)連線，重開機臨時的外部IP會改變，可以根據用途綁定固定IP</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/007.jpg" alt="連線"></p><ul><li>接收主機憑證指紋並存檔</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/008.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/009.jpg" alt="連線"></p><ul><li>輸入使用者名稱(自訂)</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/010.jpg" alt="連線"></p><ul><li>創建SSH Public Key</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/011.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/012.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/013.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/014.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/015.jpg" alt="連線"></p><ul><li>將SSH Public Key複製起來，註冊到GCE中繼資料(此為全域)，Key最後要空一格填上剛剛自訂的使用者名稱，並儲存</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/016.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/017.jpg" alt="連線"></p><ul><li>連線成功</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/018.jpg" alt="連線"></p><h1 id="開啟Root設定密碼，並優化回應慢"><a href="#開啟Root設定密碼，並優化回應慢" class="headerlink" title="開啟Root設定密碼，並優化回應慢"></a>開啟Root設定密碼，並優化回應慢</h1><ul><li>先輸入下列指令，更改配置檔</li></ul><figure class="highlight Cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">// 切換到root<br>sudo -i<br><br>// 更改配置檔<br>vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><figure class="highlight Cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">// 配置檔更改內容<br>PermitRootLogin yes<br><br>PasswordAuthentication yes<br>#PasswordAuthentication no<br><br>GSSAPIAuthentication no<br>#GSSAPIAuthentication yes<br><br>UseDNS no<br></code></pre></td></tr></table></figure><ul><li>設置Root密碼</li></ul><figure class="highlight Cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">// 幫root設定密碼<br>passwd root<br></code></pre></td></tr></table></figure><p><img src="/img/[GCP]Use XShell Connect To GCE/019.jpg" alt="連線"></p><ul><li>重開服務使修改生效</li></ul><figure class="highlight Cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">service sshd restart<br></code></pre></td></tr></table></figure><ul><li>可以使用Root及密碼登入</li></ul><p><img src="/img/[GCP]Use XShell Connect To GCE/020.jpg" alt="連線"><br><img src="/img/[GCP]Use XShell Connect To GCE/021.jpg" alt="連線"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GCP </tag>
            
            <tag> GCE </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MSSQL]Server二三事</title>
      <link href="/2018/12/06/MSSQL-Server%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
      <url>/2018/12/06/MSSQL-Server%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>使用SSMS(SQL SERVER Management Studio)，說明Server的功能<br><a id="more"></a></p><h1 id="Server-Properties"><a href="#Server-Properties" class="headerlink" title="Server Properties"></a>Server Properties</h1><ul><li>General : 基本訊息(作業系統、版本、語言、定序…)</li></ul><p><img src="/img/[MSSQL]Server二三事/001.jpg" alt="General"></p><ul><li><p>Memory : 記憶體設定(上下限…)</p><p>  <strong><font color="red">MSSQL記憶體吃了不會釋放，會預留給下次使用，所以通常會保留一些記憶體給OS使用，避免DB吃滿記憶體，造成服務異常<font></font></font></strong></p></li></ul><p><img src="/img/[MSSQL]Server二三事/002.jpg" alt="Memory"></p><ul><li>Processors : 處理器設定(通常Server端的DB會有專屬機器，比較少設定此類屬性)</li></ul><p><img src="/img/[MSSQL]Server二三事/003.jpg" alt="Processors"></p><ul><li>Security : 安全性設定</li></ul><p><img src="/img/[MSSQL]Server二三事/004.jpg" alt="Security"></p><ul><li>Connections : 連線設定(設定遠端連線逾時時間…)</li></ul><p><img src="/img/[MSSQL]Server二三事/005.jpg" alt="Connections"></p><ul><li>Database Settings : 資料庫設定</li></ul><p><img src="/img/[MSSQL]Server二三事/006.jpg" alt="Database Settings"></p><ul><li>Advanced : 進階設定</li></ul><p><img src="/img/[MSSQL]Server二三事/007.jpg" alt="Advanced"></p><ul><li>Permissions : 權限設定</li></ul><p><img src="/img/[MSSQL]Server二三事/008.jpg" alt="Permissions"></p><h1 id="Activity-Monitor"><a href="#Activity-Monitor" class="headerlink" title="Activity Monitor"></a>Activity Monitor</h1><ul><li><p>Overview : CPU、Task、I/O、Requests/Sec</p></li><li><p>Processes : 處理中的工作</p></li><li><p>Resource Waits : 等候資源，可以看出資源瓶頸在哪</p></li><li><p>Data File I/O : 資料庫硬碟建議用SSD</p></li><li><p>Recent Expensive Queries : 最近費時的查詢，查詢按右鍵看執行計畫，根據執行計畫優化語法</p></li><li><p>Active Expensive Queries : 使用中費時的查詢，查詢按右鍵看執行計畫，根據執行計畫優化語法</p></li></ul><p><img src="/img/[MSSQL]Server二三事/009.jpg" alt="Activity Monitor"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MSSQL </tag>
            
            <tag> SSMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MSSQL]分頁</title>
      <link href="/2018/12/04/MSSQL-%E5%88%86%E9%A0%81/"/>
      <url>/2018/12/04/MSSQL-%E5%88%86%E9%A0%81/</url>
      
        <content type="html"><![CDATA[<p>筆記一下自己常用的兩個SQL分頁寫法，通常會提供總筆數和分頁內容給使用端<br><a id="more"></a></p><h1 id="方法一-使用ROW-NUMBER-搭配OVER-ORDER-BY-Field-SQL-Server-2008-開始"><a href="#方法一-使用ROW-NUMBER-搭配OVER-ORDER-BY-Field-SQL-Server-2008-開始" class="headerlink" title="方法一 : 使用ROW_NUMBER()搭配OVER(ORDER BY Field)(SQL Server 2008 開始)"></a>方法一 : 使用ROW_NUMBER()搭配OVER(ORDER BY Field)(SQL Server 2008 開始)</h1><ul><li><strong><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/functions/row-number-transact-sql?view=sql-server-2017" title="ROW_NUMBER()" target="_blank" rel="noopener">ROW_NUMBER()</a></strong></li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Sql">ROW_NUMBER ( )<br>    OVER ( [ PARTITION BY value_expression , ... [ n ] ] order_by_clause )<br></code></pre></td></tr></table></figure><ul><li>先用ROW_NUMBER()替每筆資料設定編號，再根據條件取得分頁內容(ROW_NUMBER從1開始)</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">DECLARE</span> @PageIndex <span class="hljs-built_in">INT</span> = <span class="hljs-number">1</span>, @PageSize <span class="hljs-built_in">INT</span> = <span class="hljs-number">25</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span><br>(<br>    <span class="hljs-keyword">SELECT</span><br>        *, ROW_NUMBER() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FieldA <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">RowId</span><br>    <span class="hljs-keyword">FROM</span><br>        TableA<br>    <span class="hljs-keyword">WHERE</span><br>        Conditions<br>) <span class="hljs-keyword">AS</span> vw<br><span class="hljs-keyword">WHERE</span><br>    <span class="hljs-keyword">RowId</span> <span class="hljs-keyword">BETWEEN</span> (@PageIndex - <span class="hljs-number">1</span>) * @PageSize + <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> @PageIndex * @PageSize<br></code></pre></td></tr></table></figure><h1 id="方法二-使用OFFSET搭配FETCH-SQL-Server-2012-開始"><a href="#方法二-使用OFFSET搭配FETCH-SQL-Server-2012-開始" class="headerlink" title="方法二 : 使用OFFSET搭配FETCH(SQL Server 2012 開始)"></a>方法二 : 使用OFFSET搭配FETCH(SQL Server 2012 開始)</h1><ul><li><p><strong><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/functions/row-number-transact-sql?view=sql-server-2017" title="OFFSET FETCH" target="_blank" rel="noopener">OFFSET FETCH</a></strong></p></li><li><p>OFFSET - FETCH 是 ORDER BY 子句的延伸功能。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Sql">FETCH<br>          [ [ NEXT | PRIOR | FIRST | LAST<br>                    | ABSOLUTE &#123; n | @nvar &#125;<br>                    | RELATIVE &#123; n | @nvar &#125;<br>               ]<br>               FROM<br>          ]<br>&#123; &#123; [ GLOBAL ] cursor_name &#125; | @cursor_variable_name &#125;<br>[ INTO @variable_name [ ,...n ] ]<br></code></pre></td></tr></table></figure><ul><li>可以指定跳過的行數，指定要取回的資料列筆數(要從跳過 0 ROW開始)</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">DECLARE</span> @PageIndex <span class="hljs-built_in">INT</span> = <span class="hljs-number">1</span>, @PageSize <span class="hljs-built_in">INT</span> = <span class="hljs-number">25</span><br><br><span class="hljs-keyword">SELECT</span><br>    *<br><span class="hljs-keyword">FROM</span><br>    TableA<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>    FieldA <span class="hljs-keyword">DESC</span><br><span class="hljs-keyword">OFFSET</span> (@PageIndex - <span class="hljs-number">1</span>)*@PageSize <span class="hljs-keyword">ROWS</span><br><span class="hljs-keyword">FETCH</span> <span class="hljs-keyword">NEXT</span> @PageSize <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">ONLY</span>;<br></code></pre></td></tr></table></figure><h2 id="FETCH-寫法效能比-ROW-NUMBER-快很多"><a href="#FETCH-寫法效能比-ROW-NUMBER-快很多" class="headerlink" title="FETCH 寫法效能比 ROW_NUMBER() 快很多"></a><strong><font color="red">FETCH 寫法效能比 ROW_NUMBER() 快很多<font></font></font></strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MSSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Python]With Visual Studio Code</title>
      <link href="/2018/11/26/Python-With-Visual-Studio-Code/"/>
      <url>/2018/11/26/Python-With-Visual-Studio-Code/</url>
      
        <content type="html"><![CDATA[<p>Python是完全物件導向的語言。函式、模組、數字、字串都是物件。並且完全支援繼承、重載、衍生、多重繼承，有益於增強原始碼的複用性(Python2和Python3是不相容的)<br><a id="more"></a></p><h1 id="Python-GCP要使用2-7-X版本"><a href="#Python-GCP要使用2-7-X版本" class="headerlink" title="Python : GCP要使用2.7.X版本"></a>Python : GCP要使用2.7.X版本</h1><ul><li><p><strong><a href="https://www.python.org/downloads/" title="安裝Python 2.7.15" target="_blank" rel="noopener">安裝Python 2.7.15</a></strong></p></li><li><p>設定環境變數 For Windows10(Windows鍵 + Break –&gt; 進階系統設定 –&gt; 環境變數)</p><ul><li>新增 E:\Python27 (根據安裝路徑及版本會有不同，設定完可使用”python”指令)</li><li>新增 E:\Python27\Scripts (根據安裝路徑及版本會有不同，設定完可使用”pip”指令)</li></ul></li></ul><p><img src="/img/[Python]With Visual Studio Code/001.jpg" alt="Python"></p><ul><li>檢查是否安裝成功，打開CMD，執行下列指令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -V<br></code></pre></td></tr></table></figure><p><img src="/img/[Python]With Visual Studio Code/002.jpg" alt="Python"></p><ul><li>先更新pip</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip --version<br></code></pre></td></tr></table></figure><p><img src="/img/[Python]With Visual Studio Code/003.jpg" alt="Python"></p><ul><li>確認目前Python環境下，安裝了哪些套件或是framework</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip list<br></code></pre></td></tr></table></figure><p><img src="/img/[Python]With Visual Studio Code/004.jpg" alt="Python"></p><h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><ul><li><p><strong><a href="https://code.visualstudio.com/" title="安裝Python 2.7.15" target="_blank" rel="noopener">安裝Visual Studio Code</a></strong></p></li><li><p>開啟VSCode : 找個資料夾 –&gt; 按右鍵 –&gt; 選擇Open With Code</p></li></ul><p><img src="/img/[Python]With Visual Studio Code/005.jpg" alt="Python"></p><ul><li>安裝Python套件(支援Python2.7,&gt;=3.4) : 選擇左邊Extensions –&gt; 查詢Python –&gt; install –&gt; Reload</li></ul><p><img src="/img/[Python]With Visual Studio Code/006.jpg" alt="Python"><br><img src="/img/[Python]With Visual Studio Code/007.jpg" alt="Python"></p><ul><li>新增檔案: 選回Explorer –&gt; 新增資料夾(HelloWorld) –&gt; 新增檔案(Hello.py)</li></ul><p><img src="/img/[Python]With Visual Studio Code/008.jpg" alt="Python"><br><img src="/img/[Python]With Visual Studio Code/009.jpg" alt="Python"></p><ul><li>寫Hello Python World –&gt; 下中斷點 –&gt; F5</li></ul><p><img src="/img/[Python]With Visual Studio Code/010.jpg" alt="Python"><br><img src="/img/[Python]With Visual Studio Code/011.jpg" alt="Python"><br><img src="/img/[Python]With Visual Studio Code/012.jpg" alt="Python"></p><ul><li>下指令執行.py</li></ul><p>絕對路徑 :</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python F:\Python\HelloWorld\Hello.py<br></code></pre></td></tr></table></figure><p>相對路徑 :</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python .\HelloWorld\Hello.py<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Visual Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MSSQL]Merge Syntax</title>
      <link href="/2018/11/26/MSSQL-Merge-Syntax/"/>
      <url>/2018/11/26/MSSQL-Merge-Syntax/</url>
      
        <content type="html"><![CDATA[<p>MERGE是SQL Server 2008的新語法，根據與源表的連接結果，對目標表執行插入，更新或刪除操作。<br><strong><a href="https://docs.microsoft.com/en-us/sql/t-sql/statements/merge-transact-sql?view=sql-server-2017" title="參考網址" target="_blank" rel="noopener">參考網址</a></strong><br><a id="more"></a></p><h1 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h1><ul><li>建立範例Table</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> City<br>(<br>    <span class="hljs-keyword">ID</span> <span class="hljs-built_in">INTEGER</span> PRIMARY <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    CityName <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    StateName <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span><br>)<br><span class="hljs-keyword">GO</span><br></code></pre></td></tr></table></figure><p><img src="/img/[MSSQL]Merge Syntax/001.jpg" alt="Merge Syntax"></p><ul><li>通常我會搭配User Defined Types 一起用，TypeName: “TableName + Table”</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TYPE</span> [dbo].[CityTable] <span class="hljs-keyword">AS</span> <span class="hljs-keyword">TABLE</span> <br>(<br>    <span class="hljs-keyword">ID</span> <span class="hljs-built_in">INTEGER</span> PRIMARY <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    CityName <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>    StateName <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span><br>);<br>GO<br><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">EXECUTE</span><br>    <span class="hljs-keyword">ON</span> <span class="hljs-keyword">TYPE</span>::[dbo].[CityTable] <span class="hljs-keyword">TO</span> <span class="hljs-keyword">PUBLIC</span>;<br>GO<br></code></pre></td></tr></table></figure><p><img src="/img/[MSSQL]Merge Syntax/002.jpg" alt="Merge Syntax"></p><ul><li>Merge Insert、Update、Delete SP，根據需求選擇使用，MATCHED Not MATCHED後面也可以加條件</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> [dbo].[NSP_City_Merge]<br>    @CityTable    CityTable    READONLY<br><span class="hljs-keyword">AS</span><br>    <span class="hljs-keyword">MERGE</span> City <span class="hljs-keyword">AS</span> T     <span class="hljs-comment">-- 目標Table</span><br>    <span class="hljs-keyword">USING</span> @CityTable <span class="hljs-keyword">AS</span> S  <span class="hljs-comment">-- 資料來源</span><br>    <span class="hljs-keyword">ON</span><br>        T.ID = S.ID  <span class="hljs-comment">-- 判斷條件</span><br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span> <span class="hljs-comment">-- 也可加條件</span><br>        <span class="hljs-keyword">INSERT</span><br>        (<br>            <span class="hljs-keyword">ID</span>,<br>            CityName,<br>            StateName<br>        )<br>        <span class="hljs-keyword">VALUES</span><br>        (<br>            S.ID,<br>            S.CityName,<br>            S.StateName<br>        )<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">THEN</span> <span class="hljs-comment">-- 也可加條件</span><br>        <span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">SET</span> StateName = S.StateName, CityName = S.CityName<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">MATCHED</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">SOURCE</span> <span class="hljs-keyword">THEN</span>  <span class="hljs-comment">-- 也可加條件</span><br>        <span class="hljs-keyword">DELETE</span><br>    <span class="hljs-keyword">OUTPUT</span> Inserted.*;<br>RETURN 0<br>GO<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">EXECUTE</span><br>    <span class="hljs-keyword">ON</span> <span class="hljs-keyword">OBJECT</span>::[dbo].[NSP_City_Merge] <span class="hljs-keyword">TO</span> <span class="hljs-keyword">PUBLIC</span><br>    <span class="hljs-keyword">AS</span> [dbo];<br>GO<br></code></pre></td></tr></table></figure><p><img src="/img/[MSSQL]Merge Syntax/003.jpg" alt="Merge Syntax"></p><ul><li>Test</li></ul><figure class="highlight Sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><br><span class="hljs-keyword">DECLARE</span> @CityTable CityTable<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> @CityTable <br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'Taipei'</span>, <span class="hljs-string">'Taiwan'</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">'Taichung'</span>, <span class="hljs-string">'Taiwan'</span>)<br><br>EXEC NSP_City_Merge @CityTable<br></code></pre></td></tr></table></figure><p><img src="/img/[MSSQL]Merge Syntax/004.jpg" alt="Merge Syntax"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MSSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GCP]Dataflow-Use Templates</title>
      <link href="/2018/11/21/GCP-DataFlow-Use-Templates/"/>
      <url>/2018/11/21/GCP-DataFlow-Use-Templates/</url>
      
        <content type="html"><![CDATA[<h1 id="Cloud-Dataflow-是一套全面管理化的服務，能夠轉換串流-即時-模式和批次-過往-模式的資料"><a href="#Cloud-Dataflow-是一套全面管理化的服務，能夠轉換串流-即時-模式和批次-過往-模式的資料" class="headerlink" title="Cloud Dataflow 是一套全面管理化的服務，能夠轉換串流 (即時) 模式和批次 (過往) 模式的資料"></a>Cloud Dataflow 是一套全面管理化的服務，能夠轉換串流 (即時) 模式和批次 (過往) 模式的資料</h1><a id="more"></a><h1 id="異常處理"><a href="#異常處理" class="headerlink" title="異常處理"></a>異常處理</h1><ul><li>表單–&gt;Stackdriver錯誤報告</li></ul><p><img src="/img/[GCP]DataFlow-Use Templates/001.jpg" alt="錯誤報告"></p><ul><li>查看是否有DataFlow的錯誤 –&gt; 也可以訂閱異常通知</li></ul><p><img src="/img/[GCP]DataFlow-Use Templates/002.jpg" alt="錯誤報告"></p><ul><li>先到DataFlow將異常的工作關掉<br>  <strong><font color="red">注意：開發環境才可以用 “取消” ，線上環境請用 “排除”<font></font></font></strong></li></ul><p><img src="/img/[GCP]DataFlow-Use Templates/003.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/004.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/005.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/006.jpg" alt="錯誤報告"></p><ul><li>重建DataFlow<ul><li>到發佈/訂閱 選擇主題匯出到BigQuery，並根據範例輸入BigQuery output table和臨時位置</li></ul></li></ul><p><img src="/img/[GCP]DataFlow-Use Templates/007.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/008.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/009.jpg" alt="錯誤報告"><br><img src="/img/[GCP]DataFlow-Use Templates/010.jpg" alt="錯誤報告"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GCP </tag>
            
            <tag> Dataflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Advertising]ironSource</title>
      <link href="/2018/11/19/Advertising-ironSource/"/>
      <url>/2018/11/19/Advertising-ironSource/</url>
      
        <content type="html"><![CDATA[<h1 id="以色列最低調的獨角獸公司ironSource"><a href="#以色列最低調的獨角獸公司ironSource" class="headerlink" title="以色列最低調的獨角獸公司ironSource"></a>以色列最低調的獨角獸公司ironSource</h1><a id="more"></a><h1 id="Ad-Units"><a href="#Ad-Units" class="headerlink" title="Ad Units"></a>Ad Units</h1><ul><li>Rewarded Video</li><li>Interstitial</li><li>Offerwall</li><li>Banner</li></ul><h1 id="Ad-Network"><a href="#Ad-Network" class="headerlink" title="Ad Network"></a>Ad Network</h1><ul><li>AdColony</li><li>AdMob</li><li>AppLovin</li><li>Chartboost</li><li>Facebook</li><li>Tapjoy</li><li>UnityAds</li><li>Vungle</li></ul><h1 id="整合方式"><a href="#整合方式" class="headerlink" title="整合方式"></a>整合方式</h1><ul><li><p>Offerwall 這種非即時給獎勵的任務牆適合 Server-to-Server Callback</p><ul><li>APP –看完廣告–&gt; ironSource –CALLback–&gt; WebApi –驗證–&gt; Server –檢查–&gt; Award<br><a href="https://developers.ironsrc.com/ironsource-mobile/air/server-to-server-callback-setting/" title="Server-to-Server Callback Settings" target="_blank" rel="noopener">Server-to-Server Callback Settings</a></li><li>驗證機制 : Signature Validation、IP Validation<br><a href="https://developers.ironsrc.com/ironsource-mobile/air/handling-server-to-server-callback-events/#step-4" title="Authenticating The Commission Event Callback" target="_blank" rel="noopener">Authenticating The Commission Event Callback</a></li></ul></li><li><p>Rewarded Video 即時給獎勵 適合 Client-to-Server </p><ul><li>APP –看完廣告–&gt; Server –檢查–&gt; Award</li></ul></li></ul><h1 id="取每日營收"><a href="#取每日營收" class="headerlink" title="取每日營收"></a>取每日營收</h1><p><a href="https://developers.ironsrc.com/general/app-monetization/monetization-reporting-api/" title="Monetization Reporting API" target="_blank" rel="noopener">Monetization Reporting API</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Advertising </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV</title>
      <link href="/2018/11/15/CV/"/>
      <url>/2018/11/15/CV/</url>
      
        <content type="html"><![CDATA[<h1 id="基本資料"><a href="#基本資料" class="headerlink" title="基本資料"></a>基本資料</h1><a id="more"></a><ul><li>姓名: 吳家寶</li><li>生日: 1984/04/07</li><li>Email: <a href="mailto:chretbow@gmail.com" target="_blank" rel="noopener">chretbow@gmail.com</a></li><li>學歷: 中原大學-電機工程研究所、逢甲大學-自動控制學系</li></ul><hr><h2 id="專業領域"><a href="#專業領域" class="headerlink" title="專業領域"></a>專業領域</h2><ul><li>Web: Asp.net Mvc(C#), AngularJs, Vue.js, Asp.Net Core</li><li>Server: Ice, Pub/Sub, DDD</li><li>DB: MsSql, MySql, Redis, Mongo, Neo4j</li><li>GCP: BigQuery, Pub/Sub, DataFlow,…</li><li>DevOps: Jenkins, Octopus, ELK, Grafana</li><li>Git</li><li>廣告串接:Admob, Iron Source</li></ul><hr><h2 id="學歷經歷"><a href="#學歷經歷" class="headerlink" title="學歷經歷"></a>學歷經歷</h2><ul><li>2008 逢甲大學自動控制學系畢</li><li>2010 中原大學電機工程研究所畢<ul><li>醫學影像處理專長</li></ul></li><li>2014 鼎新電腦/ 系統設計師<ul><li>銷售點系統(POS)功能規劃、開發、測試、發版、維護(使用C++、C#開發)</li><li>銷售點系統(POS)整合至ERP(鼎新TIPTOP)</li><li>POS客製功能規劃、開發、測試與交付</li><li>資料庫維護(MySQL、MS SQL、Oracle、SQLite)</li><li>關鍵技術調研(硬體整合、效能優化、架構優化)</li><li>客戶上線駐廠支援</li><li>管理2~3人</li></ul></li><li>2016 向上國際股份有限公司/ 資深系統工程師<ul><li>Web：功能規劃、開發、測試、發版、維護</li><li>DB：Schema規劃、SP撰寫、效能調教、單元測試</li><li>Server：支援功能規劃、開發</li><li>DevOps應用: CI, CD</li><li>雲端技術應用(GCP)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Information]Big Data</title>
      <link href="/2018/11/03/Information-Big-Data/"/>
      <url>/2018/11/03/Information-Big-Data/</url>
      
        <content type="html"><![CDATA[<h1 id="大數據-巨量資料"><a href="#大數據-巨量資料" class="headerlink" title="大數據(巨量資料)"></a>大數據(巨量資料)</h1><a id="more"></a><p>資料庫系統無法在合理時間內進行儲存、運算、處理就稱為大數據。</p><p>2012 年 Doug Laney 給予大數據一個全新的定義</p><blockquote><p>“Big data is high volume, high velocity, and/or high variety information assets that require new forms of processing to enable enhanced decision making, insight discovery and process optimization.”</p></blockquote><h1 id="4Vs"><a href="#4Vs" class="headerlink" title="4Vs"></a>4Vs</h1><ul><li><p>Data Volume: amount of data</p><ul><li>1 Byte = 8 Bits</li><li>1 Kilobyte (KB) = 1024 Bytes</li><li>1 Megabyte (MB) = 1024 KB</li><li>1 Gigabyte (GB) = 1024 MB</li><li>1 Terabyte (TB) = 1024 GB</li><li>1 Petabyte (PB) = 1024 TB</li><li>1 Exabyte (EB) = 1024 PB</li><li>1 Zettabyte (ZB) = 1024 EB</li><li>1 Yottabyte (YB) = 1024 ZB</li></ul></li><li><p>Data Velocity: speed of data in and out</p><ul><li>資料流動是連續且快速</li><li>也可認為是”時效性”</li></ul></li><li><p>Data Variety: range of data types and sources</p><ul><li>資料來源包羅萬象</li><li>簡單劃分:結構化和非結構化</li></ul></li><li><p>Data Veracity: uncertainty of data</p><ul><li>分析過濾有偏差、偽造、異常的部分</li></ul></li></ul><p><strong><font color="blue">大數據四字箴言：「大、快、雜、疑」<font></font></font></strong></p><p><a href="https://blogs.gartner.com/doug-laney/deja-vvvue-others-claiming-gartners-volume-velocity-variety-construct-for-big-data/" title="Laney, Douglas. “The Importance of ‘Big Data’: A Definition”. Gartner. Retrieved 21 June 2012." target="_blank" rel="noopener">Laney, Douglas. “The Importance of ‘Big Data’: A Definition”. Gartner. Retrieved 21 June 2012.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Big Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[MSSQL]Log Shipping</title>
      <link href="/2018/11/01/MSSQL-Log-Shipping/"/>
      <url>/2018/11/01/MSSQL-Log-Shipping/</url>
      
        <content type="html"><![CDATA[<p>最近幫公司將產線上的帳務資料整合到ERP，讓ERP自動產生財務報表，使用到了MSSQL的Log Shipping，簡單記錄一下。<br><a id="more"></a></p><ul><li>來源端: GCP雲端VM</li><li>目的端: 公司機房受IT保護的VM</li></ul><hr><p>由系統自動執行備份資料庫的作業，自動複製備份檔案到另一伺服器上，最後再自動執行資料庫的還原作業，達成資料同步作業，可作為備援用的資料庫。<br>基本的運作流程，可以簡化為三項作業：「備份」、「複製」、「還原」。<br><img src="/img/[MSSQL]Log Shipping/001.jpg" alt="Log Shipping"></p><hr><h1 id="必要條件"><a href="#必要條件" class="headerlink" title="必要條件"></a>必要條件</h1><ul><li>主要資料庫必須使用完整或大量記錄復原模式。</li><li>需安裝 .NET Framework 3.5。</li></ul><hr><h1 id="1-首先要請IT雙向開通以下PORT-通常這是最花時間的XD-，GCP-設定VM防火牆規則"><a href="#1-首先要請IT雙向開通以下PORT-通常這是最花時間的XD-，GCP-設定VM防火牆規則" class="headerlink" title="1. 首先要請IT雙向開通以下PORT(通常這是最花時間的XD)，GCP 設定VM防火牆規則"></a>1. 首先要請IT雙向開通以下PORT(通常這是最花時間的XD)，GCP 設定VM防火牆規則</h1><ul><li>Port 1433</li><li>Port 135</li><li>Ports 137, 138, 139 , 445</li></ul><p><a href="https://blog.sqlauthority.com/2018/04/15/what-are-ports-needed-to-configure-log-shipping-interview-question-of-the-week-169/" title="參考網址" target="_blank" rel="noopener">參考網址</a></p><h1 id="2-設定相同帳號權限"><a href="#2-設定相同帳號權限" class="headerlink" title="2. 設定相同帳號權限"></a>2. 設定相同帳號權限</h1><ul><li>二台資料庫和OS各要建一組一樣的帳號密碼，SQL Server Agent服務會用這組帳號啟動。</li><li>共享的資料夾要給這組的帳號讀取寫入的權限否則會造成排程失敗，權限也可以開everyone這樣不容易出問題。</li></ul><h1 id="3-來源端按照步驟設定Log-Shipping"><a href="#3-來源端按照步驟設定Log-Shipping" class="headerlink" title="3. 來源端按照步驟設定Log Shipping"></a>3. 來源端按照步驟設定Log Shipping</h1><ul><li><p>主要資料庫進行完整備份(也可以不用)</p><blockquote><p>backup database “DBName” to disk =’G:\SQLLogShipping\DBName\FileName.bak’<br>with compression, stats = 10;</p></blockquote></li><li><p>將完整備份複製到次要資料庫還原(也可以不用)</p><ul><li>Options選擇 RESTORE WITH STANDBY</li><li>Overwirte the existing database (WITH REPLACE) 勾起</li></ul></li></ul><h1 id="4-主要資料庫設定Log-Shipping"><a href="#4-主要資料庫設定Log-Shipping" class="headerlink" title="4. 主要資料庫設定Log Shipping"></a>4. 主要資料庫設定Log Shipping</h1><p><img src="/img/[MSSQL]Log Shipping/002.jpg" alt="Log Shipping"></p><ul><li>點選 backup setting，輸入在主要伺服器上的備份資料夾與對應的本機路徑，路徑二個都要寫本機的路徑並選擇壓縮檔<ul><li><font color="green">筆記：Network path 若是主機在同一內部網路可設內部IP，若主機在不同網路可設外部IP<font></font></font></li><li><strong><font color="red">注意：此資料夾一定要讓SQL Server Agent的服務帳號擁有讀取和寫入的權限<font></font></font></strong></li></ul></li></ul><p><img src="/img/[MSSQL]Log Shipping/003.jpg" alt="Log Shipping"></p><h2 id="5-設定完成後，加入次要伺服務器"><a href="#5-設定完成後，加入次要伺服務器" class="headerlink" title="5.設定完成後，加入次要伺服務器"></a>5.設定完成後，加入次要伺服務器</h2><ul><li>連接到你的次要伺服器系統會自行搜尋與主要伺服器相同的名稱。若次要資料庫已還原(做了第3步驟)，在此選擇紅框，若是次要資料庫不存在，則選擇第一個綠框</li></ul><p><img src="/img/[MSSQL]Log Shipping/004.jpg" alt="Log Shipping"></p><ul><li>切換到 Copy Files 的分頁後，輸入次要伺服器上的分享資料夾<ul><li><strong><font color="red">注意：此資料夾一定要讓SQL Server Agent的服務帳號擁有讀取和寫入的權限<font></font></font></strong></li></ul></li></ul><p><img src="/img/[MSSQL]Log Shipping/005.jpg" alt="Log Shipping"></p><ul><li>切換到Restore Transation Log的分頁後，要讓第二台同時也可以進行讀取，所以選擇Sandby mode，並且勾選Disconnect users in the database when restoring backups</li></ul><p><img src="/img/[MSSQL]Log Shipping/006.jpg" alt="Log Shipping"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MSSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Markdown]Quick Reference</title>
      <link href="/2018/10/26/Markdown-Quick-Reference/"/>
      <url>/2018/10/26/Markdown-Quick-Reference/</url>
      
        <content type="html"><![CDATA[<h1 id="參考網址"><a href="#參考網址" class="headerlink" title="參考網址"></a><a href="https://en.support.wordpress.com/markdown-quick-reference/" title="參考網址" target="_blank" rel="noopener">參考網址</a></h1>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[GCP]Mail Service</title>
      <link href="/2018/10/24/GCP-Mail-Service/"/>
      <url>/2018/10/24/GCP-Mail-Service/</url>
      
        <content type="html"><![CDATA[<p>在GCP上建立發送MAIL服務，透過公司自家的SMTP Server<br><a id="more"></a></p><h1 id="不能使用Standard-Email-Ports-25"><a href="#不能使用Standard-Email-Ports-25" class="headerlink" title="不能使用Standard Email Ports : 25"></a><a href="https://cloud.google.com/compute/docs/tutorials/sending-mail/" title="不能使用Standard Email Ports : 25" target="_blank" rel="noopener">不能使用Standard Email Ports : 25</a></h1><p><strong><font color="Red">Port 25 is always blocked and cannot be used, even through SMTP relay using G Suite<font></font></font></strong></p><h1 id="整合方式-本次跟IT合作，使用上面方式改587-port"><a href="#整合方式-本次跟IT合作，使用上面方式改587-port" class="headerlink" title="整合方式:(本次跟IT合作，使用上面方式改587 port)"></a>整合方式:(本次跟IT合作，使用上面方式改587 port)</h1><ul><li>Use port 465, 587</li><li>GCP Third-party partners : SendGrid, Mailgun, and Mailjet</li></ul><h2 id="C-Code"><a href="#C-Code" class="headerlink" title="C# Code"></a>C# Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C#">//建立MailMessage物件<br>MailMessage mms = new MailMessage()<br>&#123;<br>    //指定一位寄信人MailAddress<br>    From = new MailAddress(MailFrom),<br>    //信件主旨<br>    Subject = MailSub,<br>    SubjectEncoding = Encoding.UTF8,<br>    //信件內容(自刻HTML)<br>    Body = getHtml(),<br><br>    BodyEncoding = Encoding.UTF8,<br>    //信件內容 是否採用Html格式<br>    IsBodyHtml = true,<br>&#125;;<br><br>if (addresses != null)<br>&#123;<br>    foreach (string address in addresses)<br>    &#123;<br>        //信件的收信人(們)address 密件<br>        mms.Bcc.Add(new MailAddress(address));<br>    &#125;<br>&#125;<br><br>using (SmtpClient client = new SmtpClient(SMTPServer, 587))<br>&#123;<br>    //設定你的帳號密碼<br>    client.Credentials = new NetworkCredential(Id, Pwd);<br>    //依需求開啟<br>    //client.EnableSsl = true;<br>    client.Send(mms);<br><br>    //避免附件被Lock無法異動<br>    if (mms.Attachments != null &amp;&amp; mms.Attachments.Count &gt; 0)<br>    &#123;<br>        mms.Attachments.Dispose();<br>    &#125;<br>    mms.Dispose();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> GCP </tag>
            
            <tag> Mail </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
